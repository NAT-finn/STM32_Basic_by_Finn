
STM32_Basic_by_Finn.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000e80  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08000fb0  08000fb0  00010fb0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000ff0  08000ff0  00010ff8  2**0
                  CONTENTS
  4 .ARM          00000000  08000ff0  08000ff0  00010ff8  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000ff0  08000ff8  00010ff8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000ff0  08000ff0  00010ff0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000ff4  08000ff4  00010ff4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010ff8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004d4  20000000  08000ff8  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200004d4  08000ff8  000204d4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00010ff8  2**0
                  CONTENTS, READONLY
 12 .debug_info   000020be  00000000  00000000  00011021  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000005f4  00000000  00000000  000130df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000220  00000000  00000000  000136d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000001f0  00000000  00000000  000138f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00002377  00000000  00000000  00013ae8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000024c4  00000000  00000000  00015e5f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00008e31  00000000  00000000  00018323  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00021154  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000080c  00000000  00000000  000211a4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	08000f98 	.word	0x08000f98

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	08000f98 	.word	0x08000f98

08000170 <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
 8000170:	b480      	push	{r7}
 8000172:	b083      	sub	sp, #12
 8000174:	af00      	add	r7, sp, #0
  static const char _aInitStr[] = "\0\0\0\0\0\0TTR REGGES";  // Init complete ID string to make sure that things also work if RTT is linked to a no-init memory area
  unsigned i;
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 8000176:	4b23      	ldr	r3, [pc, #140]	; (8000204 <_DoInit+0x94>)
 8000178:	603b      	str	r3, [r7, #0]
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 800017a:	683b      	ldr	r3, [r7, #0]
 800017c:	2203      	movs	r2, #3
 800017e:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 8000180:	683b      	ldr	r3, [r7, #0]
 8000182:	2203      	movs	r2, #3
 8000184:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 8000186:	683b      	ldr	r3, [r7, #0]
 8000188:	4a1f      	ldr	r2, [pc, #124]	; (8000208 <_DoInit+0x98>)
 800018a:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 800018c:	683b      	ldr	r3, [r7, #0]
 800018e:	4a1f      	ldr	r2, [pc, #124]	; (800020c <_DoInit+0x9c>)
 8000190:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 8000192:	683b      	ldr	r3, [r7, #0]
 8000194:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000198:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 800019a:	683b      	ldr	r3, [r7, #0]
 800019c:	2200      	movs	r2, #0
 800019e:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 80001a0:	683b      	ldr	r3, [r7, #0]
 80001a2:	2200      	movs	r2, #0
 80001a4:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 80001a6:	683b      	ldr	r3, [r7, #0]
 80001a8:	2200      	movs	r2, #0
 80001aa:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 80001ac:	683b      	ldr	r3, [r7, #0]
 80001ae:	4a16      	ldr	r2, [pc, #88]	; (8000208 <_DoInit+0x98>)
 80001b0:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 80001b2:	683b      	ldr	r3, [r7, #0]
 80001b4:	4a16      	ldr	r2, [pc, #88]	; (8000210 <_DoInit+0xa0>)
 80001b6:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 80001b8:	683b      	ldr	r3, [r7, #0]
 80001ba:	2210      	movs	r2, #16
 80001bc:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 80001be:	683b      	ldr	r3, [r7, #0]
 80001c0:	2200      	movs	r2, #0
 80001c2:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 80001c4:	683b      	ldr	r3, [r7, #0]
 80001c6:	2200      	movs	r2, #0
 80001c8:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 80001ca:	683b      	ldr	r3, [r7, #0]
 80001cc:	2200      	movs	r2, #0
 80001ce:	675a      	str	r2, [r3, #116]	; 0x74
  // Finish initialization of the control block.
  // Copy Id string backwards to make sure that "SEGGER RTT" is not found in initializer memory (usually flash),
  // as this would cause J-Link to "find" the control block at a wrong address.
  //
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 80001d0:	2300      	movs	r3, #0
 80001d2:	607b      	str	r3, [r7, #4]
 80001d4:	e00c      	b.n	80001f0 <_DoInit+0x80>
    p->acID[i] = _aInitStr[sizeof(_aInitStr) - 2 - i];  // Skip terminating \0 at the end of the array
 80001d6:	687b      	ldr	r3, [r7, #4]
 80001d8:	f1c3 030f 	rsb	r3, r3, #15
 80001dc:	4a0d      	ldr	r2, [pc, #52]	; (8000214 <_DoInit+0xa4>)
 80001de:	5cd1      	ldrb	r1, [r2, r3]
 80001e0:	683a      	ldr	r2, [r7, #0]
 80001e2:	687b      	ldr	r3, [r7, #4]
 80001e4:	4413      	add	r3, r2
 80001e6:	460a      	mov	r2, r1
 80001e8:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 80001ea:	687b      	ldr	r3, [r7, #4]
 80001ec:	3301      	adds	r3, #1
 80001ee:	607b      	str	r3, [r7, #4]
 80001f0:	687b      	ldr	r3, [r7, #4]
 80001f2:	2b0f      	cmp	r3, #15
 80001f4:	d9ef      	bls.n	80001d6 <_DoInit+0x66>
  }
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
}
 80001f6:	bf00      	nop
 80001f8:	bf00      	nop
 80001fa:	370c      	adds	r7, #12
 80001fc:	46bd      	mov	sp, r7
 80001fe:	bc80      	pop	{r7}
 8000200:	4770      	bx	lr
 8000202:	bf00      	nop
 8000204:	2000001c 	.word	0x2000001c
 8000208:	08000fb0 	.word	0x08000fb0
 800020c:	200000c4 	.word	0x200000c4
 8000210:	200004c4 	.word	0x200004c4
 8000214:	08000fcc 	.word	0x08000fcc

08000218 <_WriteBlocking>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Return value
*    >= 0 - Number of bytes written into buffer.
*/
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
 8000218:	b580      	push	{r7, lr}
 800021a:	b08a      	sub	sp, #40	; 0x28
 800021c:	af00      	add	r7, sp, #0
 800021e:	60f8      	str	r0, [r7, #12]
 8000220:	60b9      	str	r1, [r7, #8]
 8000222:	607a      	str	r2, [r7, #4]
  unsigned WrOff;
  volatile char* pDst;
  //
  // Write data to buffer and handle wrap-around if necessary
  //
  NumBytesWritten = 0u;
 8000224:	2300      	movs	r3, #0
 8000226:	623b      	str	r3, [r7, #32]
  WrOff = pRing->WrOff;
 8000228:	68fb      	ldr	r3, [r7, #12]
 800022a:	68db      	ldr	r3, [r3, #12]
 800022c:	61fb      	str	r3, [r7, #28]
  do {
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
 800022e:	68fb      	ldr	r3, [r7, #12]
 8000230:	691b      	ldr	r3, [r3, #16]
 8000232:	61bb      	str	r3, [r7, #24]
    if (RdOff > WrOff) {
 8000234:	69ba      	ldr	r2, [r7, #24]
 8000236:	69fb      	ldr	r3, [r7, #28]
 8000238:	429a      	cmp	r2, r3
 800023a:	d905      	bls.n	8000248 <_WriteBlocking+0x30>
      NumBytesToWrite = RdOff - WrOff - 1u;
 800023c:	69ba      	ldr	r2, [r7, #24]
 800023e:	69fb      	ldr	r3, [r7, #28]
 8000240:	1ad3      	subs	r3, r2, r3
 8000242:	3b01      	subs	r3, #1
 8000244:	627b      	str	r3, [r7, #36]	; 0x24
 8000246:	e007      	b.n	8000258 <_WriteBlocking+0x40>
    } else {
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
 8000248:	68fb      	ldr	r3, [r7, #12]
 800024a:	689a      	ldr	r2, [r3, #8]
 800024c:	69b9      	ldr	r1, [r7, #24]
 800024e:	69fb      	ldr	r3, [r7, #28]
 8000250:	1acb      	subs	r3, r1, r3
 8000252:	4413      	add	r3, r2
 8000254:	3b01      	subs	r3, #1
 8000256:	627b      	str	r3, [r7, #36]	; 0x24
    }
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
 8000258:	68fb      	ldr	r3, [r7, #12]
 800025a:	689a      	ldr	r2, [r3, #8]
 800025c:	69fb      	ldr	r3, [r7, #28]
 800025e:	1ad3      	subs	r3, r2, r3
 8000260:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000262:	4293      	cmp	r3, r2
 8000264:	bf28      	it	cs
 8000266:	4613      	movcs	r3, r2
 8000268:	627b      	str	r3, [r7, #36]	; 0x24
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
 800026a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800026c:	687b      	ldr	r3, [r7, #4]
 800026e:	4293      	cmp	r3, r2
 8000270:	bf28      	it	cs
 8000272:	4613      	movcs	r3, r2
 8000274:	627b      	str	r3, [r7, #36]	; 0x24
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8000276:	68fb      	ldr	r3, [r7, #12]
 8000278:	685a      	ldr	r2, [r3, #4]
 800027a:	69fb      	ldr	r3, [r7, #28]
 800027c:	4413      	add	r3, r2
 800027e:	617b      	str	r3, [r7, #20]
    WrOff           += NumBytesToWrite;
    while (NumBytesToWrite--) {
      *pDst++ = *pBuffer++;
    };
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pBuffer, NumBytesToWrite);
 8000280:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000282:	68b9      	ldr	r1, [r7, #8]
 8000284:	6978      	ldr	r0, [r7, #20]
 8000286:	f000 fe79 	bl	8000f7c <memcpy>
    NumBytesWritten += NumBytesToWrite;
 800028a:	6a3a      	ldr	r2, [r7, #32]
 800028c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800028e:	4413      	add	r3, r2
 8000290:	623b      	str	r3, [r7, #32]
    pBuffer         += NumBytesToWrite;
 8000292:	68ba      	ldr	r2, [r7, #8]
 8000294:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000296:	4413      	add	r3, r2
 8000298:	60bb      	str	r3, [r7, #8]
    NumBytes        -= NumBytesToWrite;
 800029a:	687a      	ldr	r2, [r7, #4]
 800029c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800029e:	1ad3      	subs	r3, r2, r3
 80002a0:	607b      	str	r3, [r7, #4]
    WrOff           += NumBytesToWrite;
 80002a2:	69fa      	ldr	r2, [r7, #28]
 80002a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80002a6:	4413      	add	r3, r2
 80002a8:	61fb      	str	r3, [r7, #28]
#endif
    if (WrOff == pRing->SizeOfBuffer) {
 80002aa:	68fb      	ldr	r3, [r7, #12]
 80002ac:	689b      	ldr	r3, [r3, #8]
 80002ae:	69fa      	ldr	r2, [r7, #28]
 80002b0:	429a      	cmp	r2, r3
 80002b2:	d101      	bne.n	80002b8 <_WriteBlocking+0xa0>
      WrOff = 0u;
 80002b4:	2300      	movs	r3, #0
 80002b6:	61fb      	str	r3, [r7, #28]
    }
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = WrOff;
 80002b8:	68fb      	ldr	r3, [r7, #12]
 80002ba:	69fa      	ldr	r2, [r7, #28]
 80002bc:	60da      	str	r2, [r3, #12]
  } while (NumBytes);
 80002be:	687b      	ldr	r3, [r7, #4]
 80002c0:	2b00      	cmp	r3, #0
 80002c2:	d1b4      	bne.n	800022e <_WriteBlocking+0x16>
  return NumBytesWritten;
 80002c4:	6a3b      	ldr	r3, [r7, #32]
}
 80002c6:	4618      	mov	r0, r3
 80002c8:	3728      	adds	r7, #40	; 0x28
 80002ca:	46bd      	mov	sp, r7
 80002cc:	bd80      	pop	{r7, pc}

080002ce <_WriteNoCheck>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Notes
*    (1) If there might not be enough space in the "Up"-buffer, call _WriteBlocking
*/
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
 80002ce:	b580      	push	{r7, lr}
 80002d0:	b088      	sub	sp, #32
 80002d2:	af00      	add	r7, sp, #0
 80002d4:	60f8      	str	r0, [r7, #12]
 80002d6:	60b9      	str	r1, [r7, #8]
 80002d8:	607a      	str	r2, [r7, #4]
  unsigned NumBytesAtOnce;
  unsigned WrOff;
  unsigned Rem;
  volatile char* pDst;

  WrOff = pRing->WrOff;
 80002da:	68fb      	ldr	r3, [r7, #12]
 80002dc:	68db      	ldr	r3, [r3, #12]
 80002de:	61fb      	str	r3, [r7, #28]
  Rem = pRing->SizeOfBuffer - WrOff;
 80002e0:	68fb      	ldr	r3, [r7, #12]
 80002e2:	689a      	ldr	r2, [r3, #8]
 80002e4:	69fb      	ldr	r3, [r7, #28]
 80002e6:	1ad3      	subs	r3, r2, r3
 80002e8:	61bb      	str	r3, [r7, #24]
  if (Rem > NumBytes) {
 80002ea:	69ba      	ldr	r2, [r7, #24]
 80002ec:	687b      	ldr	r3, [r7, #4]
 80002ee:	429a      	cmp	r2, r3
 80002f0:	d90f      	bls.n	8000312 <_WriteNoCheck+0x44>
    //
    // All data fits before wrap around
    //
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 80002f2:	68fb      	ldr	r3, [r7, #12]
 80002f4:	685a      	ldr	r2, [r3, #4]
 80002f6:	69fb      	ldr	r3, [r7, #28]
 80002f8:	4413      	add	r3, r2
 80002fa:	613b      	str	r3, [r7, #16]
      *pDst++ = *pData++;
    };
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = WrOff;
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytes);
 80002fc:	687a      	ldr	r2, [r7, #4]
 80002fe:	68b9      	ldr	r1, [r7, #8]
 8000300:	6938      	ldr	r0, [r7, #16]
 8000302:	f000 fe3b 	bl	8000f7c <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = WrOff + NumBytes;
 8000306:	69fa      	ldr	r2, [r7, #28]
 8000308:	687b      	ldr	r3, [r7, #4]
 800030a:	441a      	add	r2, r3
 800030c:	68fb      	ldr	r3, [r7, #12]
 800030e:	60da      	str	r2, [r3, #12]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = NumBytesAtOnce;
#endif
  }
}
 8000310:	e01d      	b.n	800034e <_WriteNoCheck+0x80>
    NumBytesAtOnce = Rem;
 8000312:	69bb      	ldr	r3, [r7, #24]
 8000314:	617b      	str	r3, [r7, #20]
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8000316:	68fb      	ldr	r3, [r7, #12]
 8000318:	685a      	ldr	r2, [r3, #4]
 800031a:	69fb      	ldr	r3, [r7, #28]
 800031c:	4413      	add	r3, r2
 800031e:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytesAtOnce);
 8000320:	697a      	ldr	r2, [r7, #20]
 8000322:	68b9      	ldr	r1, [r7, #8]
 8000324:	6938      	ldr	r0, [r7, #16]
 8000326:	f000 fe29 	bl	8000f7c <memcpy>
    NumBytesAtOnce = NumBytes - Rem;
 800032a:	687a      	ldr	r2, [r7, #4]
 800032c:	69bb      	ldr	r3, [r7, #24]
 800032e:	1ad3      	subs	r3, r2, r3
 8000330:	617b      	str	r3, [r7, #20]
    pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
 8000332:	68fb      	ldr	r3, [r7, #12]
 8000334:	685b      	ldr	r3, [r3, #4]
 8000336:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
 8000338:	68ba      	ldr	r2, [r7, #8]
 800033a:	69bb      	ldr	r3, [r7, #24]
 800033c:	4413      	add	r3, r2
 800033e:	697a      	ldr	r2, [r7, #20]
 8000340:	4619      	mov	r1, r3
 8000342:	6938      	ldr	r0, [r7, #16]
 8000344:	f000 fe1a 	bl	8000f7c <memcpy>
    pRing->WrOff = NumBytesAtOnce;
 8000348:	68fb      	ldr	r3, [r7, #12]
 800034a:	697a      	ldr	r2, [r7, #20]
 800034c:	60da      	str	r2, [r3, #12]
}
 800034e:	bf00      	nop
 8000350:	3720      	adds	r7, #32
 8000352:	46bd      	mov	sp, r7
 8000354:	bd80      	pop	{r7, pc}

08000356 <_GetAvailWriteSpace>:
*    pRing        Ring buffer to check.
*
*  Return value
*    Number of bytes that are free in the buffer.
*/
static unsigned _GetAvailWriteSpace(SEGGER_RTT_BUFFER_UP* pRing) {
 8000356:	b480      	push	{r7}
 8000358:	b087      	sub	sp, #28
 800035a:	af00      	add	r7, sp, #0
 800035c:	6078      	str	r0, [r7, #4]
  unsigned r;
  //
  // Avoid warnings regarding volatile access order.  It's not a problem
  // in this case, but dampen compiler enthusiasm.
  //
  RdOff = pRing->RdOff;
 800035e:	687b      	ldr	r3, [r7, #4]
 8000360:	691b      	ldr	r3, [r3, #16]
 8000362:	613b      	str	r3, [r7, #16]
  WrOff = pRing->WrOff;
 8000364:	687b      	ldr	r3, [r7, #4]
 8000366:	68db      	ldr	r3, [r3, #12]
 8000368:	60fb      	str	r3, [r7, #12]
  if (RdOff <= WrOff) {
 800036a:	693a      	ldr	r2, [r7, #16]
 800036c:	68fb      	ldr	r3, [r7, #12]
 800036e:	429a      	cmp	r2, r3
 8000370:	d808      	bhi.n	8000384 <_GetAvailWriteSpace+0x2e>
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
 8000372:	687b      	ldr	r3, [r7, #4]
 8000374:	689a      	ldr	r2, [r3, #8]
 8000376:	68fb      	ldr	r3, [r7, #12]
 8000378:	1ad2      	subs	r2, r2, r3
 800037a:	693b      	ldr	r3, [r7, #16]
 800037c:	4413      	add	r3, r2
 800037e:	3b01      	subs	r3, #1
 8000380:	617b      	str	r3, [r7, #20]
 8000382:	e004      	b.n	800038e <_GetAvailWriteSpace+0x38>
  } else {
    r = RdOff - WrOff - 1u;
 8000384:	693a      	ldr	r2, [r7, #16]
 8000386:	68fb      	ldr	r3, [r7, #12]
 8000388:	1ad3      	subs	r3, r2, r3
 800038a:	3b01      	subs	r3, #1
 800038c:	617b      	str	r3, [r7, #20]
  }
  return r;
 800038e:	697b      	ldr	r3, [r7, #20]
}
 8000390:	4618      	mov	r0, r3
 8000392:	371c      	adds	r7, #28
 8000394:	46bd      	mov	sp, r7
 8000396:	bc80      	pop	{r7}
 8000398:	4770      	bx	lr
	...

0800039c <SEGGER_RTT_WriteNoLock>:
*    (1) Data is stored according to buffer flags.
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 800039c:	b580      	push	{r7, lr}
 800039e:	b088      	sub	sp, #32
 80003a0:	af00      	add	r7, sp, #0
 80003a2:	60f8      	str	r0, [r7, #12]
 80003a4:	60b9      	str	r1, [r7, #8]
 80003a6:	607a      	str	r2, [r7, #4]
  const char*           pData;
  SEGGER_RTT_BUFFER_UP* pRing;
  //
  // Get "to-host" ring buffer.
  //
  pData = (const char *)pBuffer;
 80003a8:	68bb      	ldr	r3, [r7, #8]
 80003aa:	61bb      	str	r3, [r7, #24]
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 80003ac:	68fb      	ldr	r3, [r7, #12]
 80003ae:	1c5a      	adds	r2, r3, #1
 80003b0:	4613      	mov	r3, r2
 80003b2:	005b      	lsls	r3, r3, #1
 80003b4:	4413      	add	r3, r2
 80003b6:	00db      	lsls	r3, r3, #3
 80003b8:	4a1f      	ldr	r2, [pc, #124]	; (8000438 <SEGGER_RTT_WriteNoLock+0x9c>)
 80003ba:	4413      	add	r3, r2
 80003bc:	617b      	str	r3, [r7, #20]
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
 80003be:	697b      	ldr	r3, [r7, #20]
 80003c0:	695b      	ldr	r3, [r3, #20]
 80003c2:	2b02      	cmp	r3, #2
 80003c4:	d029      	beq.n	800041a <SEGGER_RTT_WriteNoLock+0x7e>
 80003c6:	2b02      	cmp	r3, #2
 80003c8:	d82e      	bhi.n	8000428 <SEGGER_RTT_WriteNoLock+0x8c>
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d002      	beq.n	80003d4 <SEGGER_RTT_WriteNoLock+0x38>
 80003ce:	2b01      	cmp	r3, #1
 80003d0:	d013      	beq.n	80003fa <SEGGER_RTT_WriteNoLock+0x5e>
 80003d2:	e029      	b.n	8000428 <SEGGER_RTT_WriteNoLock+0x8c>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
 80003d4:	6978      	ldr	r0, [r7, #20]
 80003d6:	f7ff ffbe 	bl	8000356 <_GetAvailWriteSpace>
 80003da:	6138      	str	r0, [r7, #16]
    if (Avail < NumBytes) {
 80003dc:	693a      	ldr	r2, [r7, #16]
 80003de:	687b      	ldr	r3, [r7, #4]
 80003e0:	429a      	cmp	r2, r3
 80003e2:	d202      	bcs.n	80003ea <SEGGER_RTT_WriteNoLock+0x4e>
      Status = 0u;
 80003e4:	2300      	movs	r3, #0
 80003e6:	61fb      	str	r3, [r7, #28]
    } else {
      Status = NumBytes;
      _WriteNoCheck(pRing, pData, NumBytes);
    }
    break;
 80003e8:	e021      	b.n	800042e <SEGGER_RTT_WriteNoLock+0x92>
      Status = NumBytes;
 80003ea:	687b      	ldr	r3, [r7, #4]
 80003ec:	61fb      	str	r3, [r7, #28]
      _WriteNoCheck(pRing, pData, NumBytes);
 80003ee:	687a      	ldr	r2, [r7, #4]
 80003f0:	69b9      	ldr	r1, [r7, #24]
 80003f2:	6978      	ldr	r0, [r7, #20]
 80003f4:	f7ff ff6b 	bl	80002ce <_WriteNoCheck>
    break;
 80003f8:	e019      	b.n	800042e <SEGGER_RTT_WriteNoLock+0x92>
  case SEGGER_RTT_MODE_NO_BLOCK_TRIM:
    //
    // If we are in trim mode, trim to what we can output without blocking.
    //
    Avail = _GetAvailWriteSpace(pRing);
 80003fa:	6978      	ldr	r0, [r7, #20]
 80003fc:	f7ff ffab 	bl	8000356 <_GetAvailWriteSpace>
 8000400:	6138      	str	r0, [r7, #16]
    Status = Avail < NumBytes ? Avail : NumBytes;
 8000402:	687a      	ldr	r2, [r7, #4]
 8000404:	693b      	ldr	r3, [r7, #16]
 8000406:	4293      	cmp	r3, r2
 8000408:	bf28      	it	cs
 800040a:	4613      	movcs	r3, r2
 800040c:	61fb      	str	r3, [r7, #28]
    _WriteNoCheck(pRing, pData, Status);
 800040e:	69fa      	ldr	r2, [r7, #28]
 8000410:	69b9      	ldr	r1, [r7, #24]
 8000412:	6978      	ldr	r0, [r7, #20]
 8000414:	f7ff ff5b 	bl	80002ce <_WriteNoCheck>
    break;
 8000418:	e009      	b.n	800042e <SEGGER_RTT_WriteNoLock+0x92>
  case SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL:
    //
    // If we are in blocking mode, output everything.
    //
    Status = _WriteBlocking(pRing, pData, NumBytes);
 800041a:	687a      	ldr	r2, [r7, #4]
 800041c:	69b9      	ldr	r1, [r7, #24]
 800041e:	6978      	ldr	r0, [r7, #20]
 8000420:	f7ff fefa 	bl	8000218 <_WriteBlocking>
 8000424:	61f8      	str	r0, [r7, #28]
    break;
 8000426:	e002      	b.n	800042e <SEGGER_RTT_WriteNoLock+0x92>
  default:
    Status = 0u;
 8000428:	2300      	movs	r3, #0
 800042a:	61fb      	str	r3, [r7, #28]
    break;
 800042c:	bf00      	nop
  }
  //
  // Finish up.
  //
  return Status;
 800042e:	69fb      	ldr	r3, [r7, #28]
}
 8000430:	4618      	mov	r0, r3
 8000432:	3720      	adds	r7, #32
 8000434:	46bd      	mov	sp, r7
 8000436:	bd80      	pop	{r7, pc}
 8000438:	2000001c 	.word	0x2000001c

0800043c <SEGGER_RTT_Write>:
*    Number of bytes which have been stored in the "Up"-buffer.
*
*  Notes
*    (1) Data is stored according to buffer flags.
*/
unsigned SEGGER_RTT_Write(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 800043c:	b580      	push	{r7, lr}
 800043e:	b088      	sub	sp, #32
 8000440:	af00      	add	r7, sp, #0
 8000442:	60f8      	str	r0, [r7, #12]
 8000444:	60b9      	str	r1, [r7, #8]
 8000446:	607a      	str	r2, [r7, #4]
  unsigned Status;

  INIT();
 8000448:	4b0e      	ldr	r3, [pc, #56]	; (8000484 <SEGGER_RTT_Write+0x48>)
 800044a:	61fb      	str	r3, [r7, #28]
 800044c:	69fb      	ldr	r3, [r7, #28]
 800044e:	781b      	ldrb	r3, [r3, #0]
 8000450:	b2db      	uxtb	r3, r3
 8000452:	2b00      	cmp	r3, #0
 8000454:	d101      	bne.n	800045a <SEGGER_RTT_Write+0x1e>
 8000456:	f7ff fe8b 	bl	8000170 <_DoInit>
  SEGGER_RTT_LOCK();
 800045a:	f3ef 8311 	mrs	r3, BASEPRI
 800045e:	f04f 0120 	mov.w	r1, #32
 8000462:	f381 8811 	msr	BASEPRI, r1
 8000466:	61bb      	str	r3, [r7, #24]
  Status = SEGGER_RTT_WriteNoLock(BufferIndex, pBuffer, NumBytes);  // Call the non-locking write function
 8000468:	687a      	ldr	r2, [r7, #4]
 800046a:	68b9      	ldr	r1, [r7, #8]
 800046c:	68f8      	ldr	r0, [r7, #12]
 800046e:	f7ff ff95 	bl	800039c <SEGGER_RTT_WriteNoLock>
 8000472:	6178      	str	r0, [r7, #20]
  SEGGER_RTT_UNLOCK();
 8000474:	69bb      	ldr	r3, [r7, #24]
 8000476:	f383 8811 	msr	BASEPRI, r3
  return Status;
 800047a:	697b      	ldr	r3, [r7, #20]
}
 800047c:	4618      	mov	r0, r3
 800047e:	3720      	adds	r7, #32
 8000480:	46bd      	mov	sp, r7
 8000482:	bd80      	pop	{r7, pc}
 8000484:	2000001c 	.word	0x2000001c

08000488 <SEGGER_RTT_ConfigUpBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigUpBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8000488:	b580      	push	{r7, lr}
 800048a:	b08a      	sub	sp, #40	; 0x28
 800048c:	af00      	add	r7, sp, #0
 800048e:	60f8      	str	r0, [r7, #12]
 8000490:	60b9      	str	r1, [r7, #8]
 8000492:	607a      	str	r2, [r7, #4]
 8000494:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;
  volatile SEGGER_RTT_BUFFER_UP* pUp;

  INIT();
 8000496:	4b20      	ldr	r3, [pc, #128]	; (8000518 <SEGGER_RTT_ConfigUpBuffer+0x90>)
 8000498:	623b      	str	r3, [r7, #32]
 800049a:	6a3b      	ldr	r3, [r7, #32]
 800049c:	781b      	ldrb	r3, [r3, #0]
 800049e:	b2db      	uxtb	r3, r3
 80004a0:	2b00      	cmp	r3, #0
 80004a2:	d101      	bne.n	80004a8 <SEGGER_RTT_ConfigUpBuffer+0x20>
 80004a4:	f7ff fe64 	bl	8000170 <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 80004a8:	4b1b      	ldr	r3, [pc, #108]	; (8000518 <SEGGER_RTT_ConfigUpBuffer+0x90>)
 80004aa:	61fb      	str	r3, [r7, #28]
  if (BufferIndex < SEGGER_RTT_MAX_NUM_UP_BUFFERS) {
 80004ac:	68fb      	ldr	r3, [r7, #12]
 80004ae:	2b02      	cmp	r3, #2
 80004b0:	d82a      	bhi.n	8000508 <SEGGER_RTT_ConfigUpBuffer+0x80>
    SEGGER_RTT_LOCK();
 80004b2:	f3ef 8311 	mrs	r3, BASEPRI
 80004b6:	f04f 0120 	mov.w	r1, #32
 80004ba:	f381 8811 	msr	BASEPRI, r1
 80004be:	61bb      	str	r3, [r7, #24]
    pUp = &pRTTCB->aUp[BufferIndex];
 80004c0:	68fb      	ldr	r3, [r7, #12]
 80004c2:	1c5a      	adds	r2, r3, #1
 80004c4:	4613      	mov	r3, r2
 80004c6:	005b      	lsls	r3, r3, #1
 80004c8:	4413      	add	r3, r2
 80004ca:	00db      	lsls	r3, r3, #3
 80004cc:	69fa      	ldr	r2, [r7, #28]
 80004ce:	4413      	add	r3, r2
 80004d0:	617b      	str	r3, [r7, #20]
    if (BufferIndex) {
 80004d2:	68fb      	ldr	r3, [r7, #12]
 80004d4:	2b00      	cmp	r3, #0
 80004d6:	d00e      	beq.n	80004f6 <SEGGER_RTT_ConfigUpBuffer+0x6e>
      pUp->sName        = sName;
 80004d8:	697b      	ldr	r3, [r7, #20]
 80004da:	68ba      	ldr	r2, [r7, #8]
 80004dc:	601a      	str	r2, [r3, #0]
      pUp->pBuffer      = (char*)pBuffer;
 80004de:	697b      	ldr	r3, [r7, #20]
 80004e0:	687a      	ldr	r2, [r7, #4]
 80004e2:	605a      	str	r2, [r3, #4]
      pUp->SizeOfBuffer = BufferSize;
 80004e4:	697b      	ldr	r3, [r7, #20]
 80004e6:	683a      	ldr	r2, [r7, #0]
 80004e8:	609a      	str	r2, [r3, #8]
      pUp->RdOff        = 0u;
 80004ea:	697b      	ldr	r3, [r7, #20]
 80004ec:	2200      	movs	r2, #0
 80004ee:	611a      	str	r2, [r3, #16]
      pUp->WrOff        = 0u;
 80004f0:	697b      	ldr	r3, [r7, #20]
 80004f2:	2200      	movs	r2, #0
 80004f4:	60da      	str	r2, [r3, #12]
    }
    pUp->Flags          = Flags;
 80004f6:	697b      	ldr	r3, [r7, #20]
 80004f8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80004fa:	615a      	str	r2, [r3, #20]
    SEGGER_RTT_UNLOCK();
 80004fc:	69bb      	ldr	r3, [r7, #24]
 80004fe:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 8000502:	2300      	movs	r3, #0
 8000504:	627b      	str	r3, [r7, #36]	; 0x24
 8000506:	e002      	b.n	800050e <SEGGER_RTT_ConfigUpBuffer+0x86>
  } else {
    r = -1;
 8000508:	f04f 33ff 	mov.w	r3, #4294967295
 800050c:	627b      	str	r3, [r7, #36]	; 0x24
  }
  return r;
 800050e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8000510:	4618      	mov	r0, r3
 8000512:	3728      	adds	r7, #40	; 0x28
 8000514:	46bd      	mov	sp, r7
 8000516:	bd80      	pop	{r7, pc}
 8000518:	2000001c 	.word	0x2000001c

0800051c <_StoreChar>:
*/
/*********************************************************************
*
*       _StoreChar
*/
static void _StoreChar(SEGGER_RTT_PRINTF_DESC * p, char c) {
 800051c:	b580      	push	{r7, lr}
 800051e:	b084      	sub	sp, #16
 8000520:	af00      	add	r7, sp, #0
 8000522:	6078      	str	r0, [r7, #4]
 8000524:	460b      	mov	r3, r1
 8000526:	70fb      	strb	r3, [r7, #3]
  unsigned Cnt;

  Cnt = p->Cnt;
 8000528:	687b      	ldr	r3, [r7, #4]
 800052a:	689b      	ldr	r3, [r3, #8]
 800052c:	60fb      	str	r3, [r7, #12]
  if ((Cnt + 1u) <= p->BufferSize) {
 800052e:	68fb      	ldr	r3, [r7, #12]
 8000530:	1c5a      	adds	r2, r3, #1
 8000532:	687b      	ldr	r3, [r7, #4]
 8000534:	685b      	ldr	r3, [r3, #4]
 8000536:	429a      	cmp	r2, r3
 8000538:	d80e      	bhi.n	8000558 <_StoreChar+0x3c>
    *(p->pBuffer + Cnt) = c;
 800053a:	687b      	ldr	r3, [r7, #4]
 800053c:	681a      	ldr	r2, [r3, #0]
 800053e:	68fb      	ldr	r3, [r7, #12]
 8000540:	4413      	add	r3, r2
 8000542:	78fa      	ldrb	r2, [r7, #3]
 8000544:	701a      	strb	r2, [r3, #0]
    p->Cnt = Cnt + 1u;
 8000546:	68fb      	ldr	r3, [r7, #12]
 8000548:	1c5a      	adds	r2, r3, #1
 800054a:	687b      	ldr	r3, [r7, #4]
 800054c:	609a      	str	r2, [r3, #8]
    p->ReturnValue++;
 800054e:	687b      	ldr	r3, [r7, #4]
 8000550:	68db      	ldr	r3, [r3, #12]
 8000552:	1c5a      	adds	r2, r3, #1
 8000554:	687b      	ldr	r3, [r7, #4]
 8000556:	60da      	str	r2, [r3, #12]
  }
  //
  // Write part of string, when the buffer is full
  //
  if (p->Cnt == p->BufferSize) {
 8000558:	687b      	ldr	r3, [r7, #4]
 800055a:	689a      	ldr	r2, [r3, #8]
 800055c:	687b      	ldr	r3, [r7, #4]
 800055e:	685b      	ldr	r3, [r3, #4]
 8000560:	429a      	cmp	r2, r3
 8000562:	d115      	bne.n	8000590 <_StoreChar+0x74>
    if (SEGGER_RTT_Write(p->RTTBufferIndex, p->pBuffer, p->Cnt) != p->Cnt) {
 8000564:	687b      	ldr	r3, [r7, #4]
 8000566:	6918      	ldr	r0, [r3, #16]
 8000568:	687b      	ldr	r3, [r7, #4]
 800056a:	6819      	ldr	r1, [r3, #0]
 800056c:	687b      	ldr	r3, [r7, #4]
 800056e:	689b      	ldr	r3, [r3, #8]
 8000570:	461a      	mov	r2, r3
 8000572:	f7ff ff63 	bl	800043c <SEGGER_RTT_Write>
 8000576:	4602      	mov	r2, r0
 8000578:	687b      	ldr	r3, [r7, #4]
 800057a:	689b      	ldr	r3, [r3, #8]
 800057c:	429a      	cmp	r2, r3
 800057e:	d004      	beq.n	800058a <_StoreChar+0x6e>
      p->ReturnValue = -1;
 8000580:	687b      	ldr	r3, [r7, #4]
 8000582:	f04f 32ff 	mov.w	r2, #4294967295
 8000586:	60da      	str	r2, [r3, #12]
    } else {
      p->Cnt = 0u;
    }
  }
}
 8000588:	e002      	b.n	8000590 <_StoreChar+0x74>
      p->Cnt = 0u;
 800058a:	687b      	ldr	r3, [r7, #4]
 800058c:	2200      	movs	r2, #0
 800058e:	609a      	str	r2, [r3, #8]
}
 8000590:	bf00      	nop
 8000592:	3710      	adds	r7, #16
 8000594:	46bd      	mov	sp, r7
 8000596:	bd80      	pop	{r7, pc}

08000598 <_PrintUnsigned>:

/*********************************************************************
*
*       _PrintUnsigned
*/
static void _PrintUnsigned(SEGGER_RTT_PRINTF_DESC * pBufferDesc, unsigned v, unsigned Base, unsigned NumDigits, unsigned FieldWidth, unsigned FormatFlags) {
 8000598:	b580      	push	{r7, lr}
 800059a:	b08a      	sub	sp, #40	; 0x28
 800059c:	af00      	add	r7, sp, #0
 800059e:	60f8      	str	r0, [r7, #12]
 80005a0:	60b9      	str	r1, [r7, #8]
 80005a2:	607a      	str	r2, [r7, #4]
 80005a4:	603b      	str	r3, [r7, #0]
  unsigned Digit;
  unsigned Number;
  unsigned Width;
  char c;

  Number = v;
 80005a6:	68bb      	ldr	r3, [r7, #8]
 80005a8:	623b      	str	r3, [r7, #32]
  Digit = 1u;
 80005aa:	2301      	movs	r3, #1
 80005ac:	627b      	str	r3, [r7, #36]	; 0x24
  //
  // Get actual field width
  //
  Width = 1u;
 80005ae:	2301      	movs	r3, #1
 80005b0:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 80005b2:	e007      	b.n	80005c4 <_PrintUnsigned+0x2c>
    Number = (Number / Base);
 80005b4:	6a3a      	ldr	r2, [r7, #32]
 80005b6:	687b      	ldr	r3, [r7, #4]
 80005b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80005bc:	623b      	str	r3, [r7, #32]
    Width++;
 80005be:	69fb      	ldr	r3, [r7, #28]
 80005c0:	3301      	adds	r3, #1
 80005c2:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 80005c4:	6a3a      	ldr	r2, [r7, #32]
 80005c6:	687b      	ldr	r3, [r7, #4]
 80005c8:	429a      	cmp	r2, r3
 80005ca:	d2f3      	bcs.n	80005b4 <_PrintUnsigned+0x1c>
  }
  if (NumDigits > Width) {
 80005cc:	683a      	ldr	r2, [r7, #0]
 80005ce:	69fb      	ldr	r3, [r7, #28]
 80005d0:	429a      	cmp	r2, r3
 80005d2:	d901      	bls.n	80005d8 <_PrintUnsigned+0x40>
    Width = NumDigits;
 80005d4:	683b      	ldr	r3, [r7, #0]
 80005d6:	61fb      	str	r3, [r7, #28]
  }
  //
  // Print leading chars if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) {
 80005d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80005da:	f003 0301 	and.w	r3, r3, #1
 80005de:	2b00      	cmp	r3, #0
 80005e0:	d125      	bne.n	800062e <_PrintUnsigned+0x96>
    if (FieldWidth != 0u) {
 80005e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80005e4:	2b00      	cmp	r3, #0
 80005e6:	d022      	beq.n	800062e <_PrintUnsigned+0x96>
      if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && (NumDigits == 0u)) {
 80005e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80005ea:	f003 0302 	and.w	r3, r3, #2
 80005ee:	2b00      	cmp	r3, #0
 80005f0:	d005      	beq.n	80005fe <_PrintUnsigned+0x66>
 80005f2:	683b      	ldr	r3, [r7, #0]
 80005f4:	2b00      	cmp	r3, #0
 80005f6:	d102      	bne.n	80005fe <_PrintUnsigned+0x66>
        c = '0';
 80005f8:	2330      	movs	r3, #48	; 0x30
 80005fa:	76fb      	strb	r3, [r7, #27]
 80005fc:	e001      	b.n	8000602 <_PrintUnsigned+0x6a>
      } else {
        c = ' ';
 80005fe:	2320      	movs	r3, #32
 8000600:	76fb      	strb	r3, [r7, #27]
      }
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8000602:	e00b      	b.n	800061c <_PrintUnsigned+0x84>
        FieldWidth--;
 8000604:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000606:	3b01      	subs	r3, #1
 8000608:	633b      	str	r3, [r7, #48]	; 0x30
        _StoreChar(pBufferDesc, c);
 800060a:	7efb      	ldrb	r3, [r7, #27]
 800060c:	4619      	mov	r1, r3
 800060e:	68f8      	ldr	r0, [r7, #12]
 8000610:	f7ff ff84 	bl	800051c <_StoreChar>
        if (pBufferDesc->ReturnValue < 0) {
 8000614:	68fb      	ldr	r3, [r7, #12]
 8000616:	68db      	ldr	r3, [r3, #12]
 8000618:	2b00      	cmp	r3, #0
 800061a:	db07      	blt.n	800062c <_PrintUnsigned+0x94>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 800061c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800061e:	2b00      	cmp	r3, #0
 8000620:	d005      	beq.n	800062e <_PrintUnsigned+0x96>
 8000622:	69fa      	ldr	r2, [r7, #28]
 8000624:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000626:	429a      	cmp	r2, r3
 8000628:	d3ec      	bcc.n	8000604 <_PrintUnsigned+0x6c>
 800062a:	e000      	b.n	800062e <_PrintUnsigned+0x96>
          break;
 800062c:	bf00      	nop
        }
      }
    }
  }
  if (pBufferDesc->ReturnValue >= 0) {
 800062e:	68fb      	ldr	r3, [r7, #12]
 8000630:	68db      	ldr	r3, [r3, #12]
 8000632:	2b00      	cmp	r3, #0
 8000634:	db55      	blt.n	80006e2 <_PrintUnsigned+0x14a>
    // Compute Digit.
    // Loop until Digit has the value of the highest digit required.
    // Example: If the output is 345 (Base 10), loop 2 times until Digit is 100.
    //
    while (1) {
      if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 8000636:	683b      	ldr	r3, [r7, #0]
 8000638:	2b01      	cmp	r3, #1
 800063a:	d903      	bls.n	8000644 <_PrintUnsigned+0xac>
        NumDigits--;
 800063c:	683b      	ldr	r3, [r7, #0]
 800063e:	3b01      	subs	r3, #1
 8000640:	603b      	str	r3, [r7, #0]
 8000642:	e009      	b.n	8000658 <_PrintUnsigned+0xc0>
      } else {
        Div = v / Digit;
 8000644:	68ba      	ldr	r2, [r7, #8]
 8000646:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000648:	fbb2 f3f3 	udiv	r3, r2, r3
 800064c:	617b      	str	r3, [r7, #20]
        if (Div < Base) {        // Is our divider big enough to extract the highest digit from value? => Done
 800064e:	697a      	ldr	r2, [r7, #20]
 8000650:	687b      	ldr	r3, [r7, #4]
 8000652:	429a      	cmp	r2, r3
 8000654:	d200      	bcs.n	8000658 <_PrintUnsigned+0xc0>
          break;
 8000656:	e005      	b.n	8000664 <_PrintUnsigned+0xcc>
        }
      }
      Digit *= Base;
 8000658:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800065a:	687a      	ldr	r2, [r7, #4]
 800065c:	fb02 f303 	mul.w	r3, r2, r3
 8000660:	627b      	str	r3, [r7, #36]	; 0x24
      if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 8000662:	e7e8      	b.n	8000636 <_PrintUnsigned+0x9e>
    }
    //
    // Output digits
    //
    do {
      Div = v / Digit;
 8000664:	68ba      	ldr	r2, [r7, #8]
 8000666:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000668:	fbb2 f3f3 	udiv	r3, r2, r3
 800066c:	617b      	str	r3, [r7, #20]
      v -= Div * Digit;
 800066e:	697b      	ldr	r3, [r7, #20]
 8000670:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000672:	fb02 f303 	mul.w	r3, r2, r3
 8000676:	68ba      	ldr	r2, [r7, #8]
 8000678:	1ad3      	subs	r3, r2, r3
 800067a:	60bb      	str	r3, [r7, #8]
      _StoreChar(pBufferDesc, _aV2C[Div]);
 800067c:	4a1b      	ldr	r2, [pc, #108]	; (80006ec <_PrintUnsigned+0x154>)
 800067e:	697b      	ldr	r3, [r7, #20]
 8000680:	4413      	add	r3, r2
 8000682:	781b      	ldrb	r3, [r3, #0]
 8000684:	4619      	mov	r1, r3
 8000686:	68f8      	ldr	r0, [r7, #12]
 8000688:	f7ff ff48 	bl	800051c <_StoreChar>
      if (pBufferDesc->ReturnValue < 0) {
 800068c:	68fb      	ldr	r3, [r7, #12]
 800068e:	68db      	ldr	r3, [r3, #12]
 8000690:	2b00      	cmp	r3, #0
 8000692:	db08      	blt.n	80006a6 <_PrintUnsigned+0x10e>
        break;
      }
      Digit /= Base;
 8000694:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000696:	687b      	ldr	r3, [r7, #4]
 8000698:	fbb2 f3f3 	udiv	r3, r2, r3
 800069c:	627b      	str	r3, [r7, #36]	; 0x24
    } while (Digit);
 800069e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80006a0:	2b00      	cmp	r3, #0
 80006a2:	d1df      	bne.n	8000664 <_PrintUnsigned+0xcc>
 80006a4:	e000      	b.n	80006a8 <_PrintUnsigned+0x110>
        break;
 80006a6:	bf00      	nop
    //
    // Print trailing spaces if necessary
    //
    if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == FORMAT_FLAG_LEFT_JUSTIFY) {
 80006a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80006aa:	f003 0301 	and.w	r3, r3, #1
 80006ae:	2b00      	cmp	r3, #0
 80006b0:	d017      	beq.n	80006e2 <_PrintUnsigned+0x14a>
      if (FieldWidth != 0u) {
 80006b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80006b4:	2b00      	cmp	r3, #0
 80006b6:	d014      	beq.n	80006e2 <_PrintUnsigned+0x14a>
        while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80006b8:	e00a      	b.n	80006d0 <_PrintUnsigned+0x138>
          FieldWidth--;
 80006ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80006bc:	3b01      	subs	r3, #1
 80006be:	633b      	str	r3, [r7, #48]	; 0x30
          _StoreChar(pBufferDesc, ' ');
 80006c0:	2120      	movs	r1, #32
 80006c2:	68f8      	ldr	r0, [r7, #12]
 80006c4:	f7ff ff2a 	bl	800051c <_StoreChar>
          if (pBufferDesc->ReturnValue < 0) {
 80006c8:	68fb      	ldr	r3, [r7, #12]
 80006ca:	68db      	ldr	r3, [r3, #12]
 80006cc:	2b00      	cmp	r3, #0
 80006ce:	db07      	blt.n	80006e0 <_PrintUnsigned+0x148>
        while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80006d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	d005      	beq.n	80006e2 <_PrintUnsigned+0x14a>
 80006d6:	69fa      	ldr	r2, [r7, #28]
 80006d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80006da:	429a      	cmp	r2, r3
 80006dc:	d3ed      	bcc.n	80006ba <_PrintUnsigned+0x122>
          }
        }
      }
    }
  }
}
 80006de:	e000      	b.n	80006e2 <_PrintUnsigned+0x14a>
            break;
 80006e0:	bf00      	nop
}
 80006e2:	bf00      	nop
 80006e4:	3728      	adds	r7, #40	; 0x28
 80006e6:	46bd      	mov	sp, r7
 80006e8:	bd80      	pop	{r7, pc}
 80006ea:	bf00      	nop
 80006ec:	08000fe0 	.word	0x08000fe0

080006f0 <_PrintInt>:

/*********************************************************************
*
*       _PrintInt
*/
static void _PrintInt(SEGGER_RTT_PRINTF_DESC * pBufferDesc, int v, unsigned Base, unsigned NumDigits, unsigned FieldWidth, unsigned FormatFlags) {
 80006f0:	b580      	push	{r7, lr}
 80006f2:	b088      	sub	sp, #32
 80006f4:	af02      	add	r7, sp, #8
 80006f6:	60f8      	str	r0, [r7, #12]
 80006f8:	60b9      	str	r1, [r7, #8]
 80006fa:	607a      	str	r2, [r7, #4]
 80006fc:	603b      	str	r3, [r7, #0]
  unsigned Width;
  int Number;

  Number = (v < 0) ? -v : v;
 80006fe:	68bb      	ldr	r3, [r7, #8]
 8000700:	2b00      	cmp	r3, #0
 8000702:	bfb8      	it	lt
 8000704:	425b      	neglt	r3, r3
 8000706:	613b      	str	r3, [r7, #16]

  //
  // Get actual field width
  //
  Width = 1u;
 8000708:	2301      	movs	r3, #1
 800070a:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 800070c:	e007      	b.n	800071e <_PrintInt+0x2e>
    Number = (Number / (int)Base);
 800070e:	687b      	ldr	r3, [r7, #4]
 8000710:	693a      	ldr	r2, [r7, #16]
 8000712:	fb92 f3f3 	sdiv	r3, r2, r3
 8000716:	613b      	str	r3, [r7, #16]
    Width++;
 8000718:	697b      	ldr	r3, [r7, #20]
 800071a:	3301      	adds	r3, #1
 800071c:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 800071e:	687b      	ldr	r3, [r7, #4]
 8000720:	693a      	ldr	r2, [r7, #16]
 8000722:	429a      	cmp	r2, r3
 8000724:	daf3      	bge.n	800070e <_PrintInt+0x1e>
  }
  if (NumDigits > Width) {
 8000726:	683a      	ldr	r2, [r7, #0]
 8000728:	697b      	ldr	r3, [r7, #20]
 800072a:	429a      	cmp	r2, r3
 800072c:	d901      	bls.n	8000732 <_PrintInt+0x42>
    Width = NumDigits;
 800072e:	683b      	ldr	r3, [r7, #0]
 8000730:	617b      	str	r3, [r7, #20]
  }
  if ((FieldWidth > 0u) && ((v < 0) || ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN))) {
 8000732:	6a3b      	ldr	r3, [r7, #32]
 8000734:	2b00      	cmp	r3, #0
 8000736:	d00a      	beq.n	800074e <_PrintInt+0x5e>
 8000738:	68bb      	ldr	r3, [r7, #8]
 800073a:	2b00      	cmp	r3, #0
 800073c:	db04      	blt.n	8000748 <_PrintInt+0x58>
 800073e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000740:	f003 0304 	and.w	r3, r3, #4
 8000744:	2b00      	cmp	r3, #0
 8000746:	d002      	beq.n	800074e <_PrintInt+0x5e>
    FieldWidth--;
 8000748:	6a3b      	ldr	r3, [r7, #32]
 800074a:	3b01      	subs	r3, #1
 800074c:	623b      	str	r3, [r7, #32]
  }

  //
  // Print leading spaces if necessary
  //
  if ((((FormatFlags & FORMAT_FLAG_PAD_ZERO) == 0u) || (NumDigits != 0u)) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u)) {
 800074e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000750:	f003 0302 	and.w	r3, r3, #2
 8000754:	2b00      	cmp	r3, #0
 8000756:	d002      	beq.n	800075e <_PrintInt+0x6e>
 8000758:	683b      	ldr	r3, [r7, #0]
 800075a:	2b00      	cmp	r3, #0
 800075c:	d01c      	beq.n	8000798 <_PrintInt+0xa8>
 800075e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000760:	f003 0301 	and.w	r3, r3, #1
 8000764:	2b00      	cmp	r3, #0
 8000766:	d117      	bne.n	8000798 <_PrintInt+0xa8>
    if (FieldWidth != 0u) {
 8000768:	6a3b      	ldr	r3, [r7, #32]
 800076a:	2b00      	cmp	r3, #0
 800076c:	d014      	beq.n	8000798 <_PrintInt+0xa8>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 800076e:	e00a      	b.n	8000786 <_PrintInt+0x96>
        FieldWidth--;
 8000770:	6a3b      	ldr	r3, [r7, #32]
 8000772:	3b01      	subs	r3, #1
 8000774:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, ' ');
 8000776:	2120      	movs	r1, #32
 8000778:	68f8      	ldr	r0, [r7, #12]
 800077a:	f7ff fecf 	bl	800051c <_StoreChar>
        if (pBufferDesc->ReturnValue < 0) {
 800077e:	68fb      	ldr	r3, [r7, #12]
 8000780:	68db      	ldr	r3, [r3, #12]
 8000782:	2b00      	cmp	r3, #0
 8000784:	db07      	blt.n	8000796 <_PrintInt+0xa6>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8000786:	6a3b      	ldr	r3, [r7, #32]
 8000788:	2b00      	cmp	r3, #0
 800078a:	d005      	beq.n	8000798 <_PrintInt+0xa8>
 800078c:	697a      	ldr	r2, [r7, #20]
 800078e:	6a3b      	ldr	r3, [r7, #32]
 8000790:	429a      	cmp	r2, r3
 8000792:	d3ed      	bcc.n	8000770 <_PrintInt+0x80>
 8000794:	e000      	b.n	8000798 <_PrintInt+0xa8>
          break;
 8000796:	bf00      	nop
    }
  }
  //
  // Print sign if necessary
  //
  if (pBufferDesc->ReturnValue >= 0) {
 8000798:	68fb      	ldr	r3, [r7, #12]
 800079a:	68db      	ldr	r3, [r3, #12]
 800079c:	2b00      	cmp	r3, #0
 800079e:	db4a      	blt.n	8000836 <_PrintInt+0x146>
    if (v < 0) {
 80007a0:	68bb      	ldr	r3, [r7, #8]
 80007a2:	2b00      	cmp	r3, #0
 80007a4:	da07      	bge.n	80007b6 <_PrintInt+0xc6>
      v = -v;
 80007a6:	68bb      	ldr	r3, [r7, #8]
 80007a8:	425b      	negs	r3, r3
 80007aa:	60bb      	str	r3, [r7, #8]
      _StoreChar(pBufferDesc, '-');
 80007ac:	212d      	movs	r1, #45	; 0x2d
 80007ae:	68f8      	ldr	r0, [r7, #12]
 80007b0:	f7ff feb4 	bl	800051c <_StoreChar>
 80007b4:	e008      	b.n	80007c8 <_PrintInt+0xd8>
    } else if ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN) {
 80007b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007b8:	f003 0304 	and.w	r3, r3, #4
 80007bc:	2b00      	cmp	r3, #0
 80007be:	d003      	beq.n	80007c8 <_PrintInt+0xd8>
      _StoreChar(pBufferDesc, '+');
 80007c0:	212b      	movs	r1, #43	; 0x2b
 80007c2:	68f8      	ldr	r0, [r7, #12]
 80007c4:	f7ff feaa 	bl	800051c <_StoreChar>
    } else {

    }
    if (pBufferDesc->ReturnValue >= 0) {
 80007c8:	68fb      	ldr	r3, [r7, #12]
 80007ca:	68db      	ldr	r3, [r3, #12]
 80007cc:	2b00      	cmp	r3, #0
 80007ce:	db32      	blt.n	8000836 <_PrintInt+0x146>
      //
      // Print leading zeros if necessary
      //
      if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) && (NumDigits == 0u)) {
 80007d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007d2:	f003 0302 	and.w	r3, r3, #2
 80007d6:	2b00      	cmp	r3, #0
 80007d8:	d01f      	beq.n	800081a <_PrintInt+0x12a>
 80007da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007dc:	f003 0301 	and.w	r3, r3, #1
 80007e0:	2b00      	cmp	r3, #0
 80007e2:	d11a      	bne.n	800081a <_PrintInt+0x12a>
 80007e4:	683b      	ldr	r3, [r7, #0]
 80007e6:	2b00      	cmp	r3, #0
 80007e8:	d117      	bne.n	800081a <_PrintInt+0x12a>
        if (FieldWidth != 0u) {
 80007ea:	6a3b      	ldr	r3, [r7, #32]
 80007ec:	2b00      	cmp	r3, #0
 80007ee:	d014      	beq.n	800081a <_PrintInt+0x12a>
          while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80007f0:	e00a      	b.n	8000808 <_PrintInt+0x118>
            FieldWidth--;
 80007f2:	6a3b      	ldr	r3, [r7, #32]
 80007f4:	3b01      	subs	r3, #1
 80007f6:	623b      	str	r3, [r7, #32]
            _StoreChar(pBufferDesc, '0');
 80007f8:	2130      	movs	r1, #48	; 0x30
 80007fa:	68f8      	ldr	r0, [r7, #12]
 80007fc:	f7ff fe8e 	bl	800051c <_StoreChar>
            if (pBufferDesc->ReturnValue < 0) {
 8000800:	68fb      	ldr	r3, [r7, #12]
 8000802:	68db      	ldr	r3, [r3, #12]
 8000804:	2b00      	cmp	r3, #0
 8000806:	db07      	blt.n	8000818 <_PrintInt+0x128>
          while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8000808:	6a3b      	ldr	r3, [r7, #32]
 800080a:	2b00      	cmp	r3, #0
 800080c:	d005      	beq.n	800081a <_PrintInt+0x12a>
 800080e:	697a      	ldr	r2, [r7, #20]
 8000810:	6a3b      	ldr	r3, [r7, #32]
 8000812:	429a      	cmp	r2, r3
 8000814:	d3ed      	bcc.n	80007f2 <_PrintInt+0x102>
 8000816:	e000      	b.n	800081a <_PrintInt+0x12a>
              break;
 8000818:	bf00      	nop
            }
          }
        }
      }
      if (pBufferDesc->ReturnValue >= 0) {
 800081a:	68fb      	ldr	r3, [r7, #12]
 800081c:	68db      	ldr	r3, [r3, #12]
 800081e:	2b00      	cmp	r3, #0
 8000820:	db09      	blt.n	8000836 <_PrintInt+0x146>
        //
        // Print number without sign
        //
        _PrintUnsigned(pBufferDesc, (unsigned)v, Base, NumDigits, FieldWidth, FormatFlags);
 8000822:	68b9      	ldr	r1, [r7, #8]
 8000824:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000826:	9301      	str	r3, [sp, #4]
 8000828:	6a3b      	ldr	r3, [r7, #32]
 800082a:	9300      	str	r3, [sp, #0]
 800082c:	683b      	ldr	r3, [r7, #0]
 800082e:	687a      	ldr	r2, [r7, #4]
 8000830:	68f8      	ldr	r0, [r7, #12]
 8000832:	f7ff feb1 	bl	8000598 <_PrintUnsigned>
      }
    }
  }
}
 8000836:	bf00      	nop
 8000838:	3718      	adds	r7, #24
 800083a:	46bd      	mov	sp, r7
 800083c:	bd80      	pop	{r7, pc}
	...

08000840 <SEGGER_RTT_vprintf>:
*
*  Return values
*    >= 0:  Number of bytes which have been stored in the "Up"-buffer.
*     < 0:  Error
*/
int SEGGER_RTT_vprintf(unsigned BufferIndex, const char * sFormat, va_list * pParamList) {
 8000840:	b580      	push	{r7, lr}
 8000842:	b0a2      	sub	sp, #136	; 0x88
 8000844:	af02      	add	r7, sp, #8
 8000846:	60f8      	str	r0, [r7, #12]
 8000848:	60b9      	str	r1, [r7, #8]
 800084a:	607a      	str	r2, [r7, #4]
  unsigned NumDigits;
  unsigned FormatFlags;
  unsigned FieldWidth;
  char acBuffer[SEGGER_RTT_PRINTF_BUFFER_SIZE];

  BufferDesc.pBuffer        = acBuffer;
 800084c:	f107 0310 	add.w	r3, r7, #16
 8000850:	653b      	str	r3, [r7, #80]	; 0x50
  BufferDesc.BufferSize     = SEGGER_RTT_PRINTF_BUFFER_SIZE;
 8000852:	2340      	movs	r3, #64	; 0x40
 8000854:	657b      	str	r3, [r7, #84]	; 0x54
  BufferDesc.Cnt            = 0u;
 8000856:	2300      	movs	r3, #0
 8000858:	65bb      	str	r3, [r7, #88]	; 0x58
  BufferDesc.RTTBufferIndex = BufferIndex;
 800085a:	68fb      	ldr	r3, [r7, #12]
 800085c:	663b      	str	r3, [r7, #96]	; 0x60
  BufferDesc.ReturnValue    = 0;
 800085e:	2300      	movs	r3, #0
 8000860:	65fb      	str	r3, [r7, #92]	; 0x5c

  do {
    c = *sFormat;
 8000862:	68bb      	ldr	r3, [r7, #8]
 8000864:	781b      	ldrb	r3, [r3, #0]
 8000866:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    sFormat++;
 800086a:	68bb      	ldr	r3, [r7, #8]
 800086c:	3301      	adds	r3, #1
 800086e:	60bb      	str	r3, [r7, #8]
    if (c == 0u) {
 8000870:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8000874:	2b00      	cmp	r3, #0
 8000876:	f000 819f 	beq.w	8000bb8 <SEGGER_RTT_vprintf+0x378>
      break;
    }
    if (c == '%') {
 800087a:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800087e:	2b25      	cmp	r3, #37	; 0x25
 8000880:	f040 818d 	bne.w	8000b9e <SEGGER_RTT_vprintf+0x35e>
      //
      // Filter out flags
      //
      FormatFlags = 0u;
 8000884:	2300      	movs	r3, #0
 8000886:	673b      	str	r3, [r7, #112]	; 0x70
      v = 1;
 8000888:	2301      	movs	r3, #1
 800088a:	67bb      	str	r3, [r7, #120]	; 0x78
      do {
        c = *sFormat;
 800088c:	68bb      	ldr	r3, [r7, #8]
 800088e:	781b      	ldrb	r3, [r3, #0]
 8000890:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
        switch (c) {
 8000894:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8000898:	3b23      	subs	r3, #35	; 0x23
 800089a:	2b0d      	cmp	r3, #13
 800089c:	d83e      	bhi.n	800091c <SEGGER_RTT_vprintf+0xdc>
 800089e:	a201      	add	r2, pc, #4	; (adr r2, 80008a4 <SEGGER_RTT_vprintf+0x64>)
 80008a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80008a4:	0800090d 	.word	0x0800090d
 80008a8:	0800091d 	.word	0x0800091d
 80008ac:	0800091d 	.word	0x0800091d
 80008b0:	0800091d 	.word	0x0800091d
 80008b4:	0800091d 	.word	0x0800091d
 80008b8:	0800091d 	.word	0x0800091d
 80008bc:	0800091d 	.word	0x0800091d
 80008c0:	0800091d 	.word	0x0800091d
 80008c4:	080008fd 	.word	0x080008fd
 80008c8:	0800091d 	.word	0x0800091d
 80008cc:	080008dd 	.word	0x080008dd
 80008d0:	0800091d 	.word	0x0800091d
 80008d4:	0800091d 	.word	0x0800091d
 80008d8:	080008ed 	.word	0x080008ed
        case '-': FormatFlags |= FORMAT_FLAG_LEFT_JUSTIFY; sFormat++; break;
 80008dc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80008de:	f043 0301 	orr.w	r3, r3, #1
 80008e2:	673b      	str	r3, [r7, #112]	; 0x70
 80008e4:	68bb      	ldr	r3, [r7, #8]
 80008e6:	3301      	adds	r3, #1
 80008e8:	60bb      	str	r3, [r7, #8]
 80008ea:	e01a      	b.n	8000922 <SEGGER_RTT_vprintf+0xe2>
        case '0': FormatFlags |= FORMAT_FLAG_PAD_ZERO;     sFormat++; break;
 80008ec:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80008ee:	f043 0302 	orr.w	r3, r3, #2
 80008f2:	673b      	str	r3, [r7, #112]	; 0x70
 80008f4:	68bb      	ldr	r3, [r7, #8]
 80008f6:	3301      	adds	r3, #1
 80008f8:	60bb      	str	r3, [r7, #8]
 80008fa:	e012      	b.n	8000922 <SEGGER_RTT_vprintf+0xe2>
        case '+': FormatFlags |= FORMAT_FLAG_PRINT_SIGN;   sFormat++; break;
 80008fc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80008fe:	f043 0304 	orr.w	r3, r3, #4
 8000902:	673b      	str	r3, [r7, #112]	; 0x70
 8000904:	68bb      	ldr	r3, [r7, #8]
 8000906:	3301      	adds	r3, #1
 8000908:	60bb      	str	r3, [r7, #8]
 800090a:	e00a      	b.n	8000922 <SEGGER_RTT_vprintf+0xe2>
        case '#': FormatFlags |= FORMAT_FLAG_ALTERNATE;    sFormat++; break;
 800090c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800090e:	f043 0308 	orr.w	r3, r3, #8
 8000912:	673b      	str	r3, [r7, #112]	; 0x70
 8000914:	68bb      	ldr	r3, [r7, #8]
 8000916:	3301      	adds	r3, #1
 8000918:	60bb      	str	r3, [r7, #8]
 800091a:	e002      	b.n	8000922 <SEGGER_RTT_vprintf+0xe2>
        default:  v = 0; break;
 800091c:	2300      	movs	r3, #0
 800091e:	67bb      	str	r3, [r7, #120]	; 0x78
 8000920:	bf00      	nop
        }
      } while (v);
 8000922:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8000924:	2b00      	cmp	r3, #0
 8000926:	d1b1      	bne.n	800088c <SEGGER_RTT_vprintf+0x4c>
      //
      // filter out field with
      //
      FieldWidth = 0u;
 8000928:	2300      	movs	r3, #0
 800092a:	66fb      	str	r3, [r7, #108]	; 0x6c
      do {
        c = *sFormat;
 800092c:	68bb      	ldr	r3, [r7, #8]
 800092e:	781b      	ldrb	r3, [r3, #0]
 8000930:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
        if ((c < '0') || (c > '9')) {
 8000934:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8000938:	2b2f      	cmp	r3, #47	; 0x2f
 800093a:	d912      	bls.n	8000962 <SEGGER_RTT_vprintf+0x122>
 800093c:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8000940:	2b39      	cmp	r3, #57	; 0x39
 8000942:	d80e      	bhi.n	8000962 <SEGGER_RTT_vprintf+0x122>
          break;
        }
        sFormat++;
 8000944:	68bb      	ldr	r3, [r7, #8]
 8000946:	3301      	adds	r3, #1
 8000948:	60bb      	str	r3, [r7, #8]
        FieldWidth = (FieldWidth * 10u) + ((unsigned)c - '0');
 800094a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800094c:	4613      	mov	r3, r2
 800094e:	009b      	lsls	r3, r3, #2
 8000950:	4413      	add	r3, r2
 8000952:	005b      	lsls	r3, r3, #1
 8000954:	461a      	mov	r2, r3
 8000956:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800095a:	4413      	add	r3, r2
 800095c:	3b30      	subs	r3, #48	; 0x30
 800095e:	66fb      	str	r3, [r7, #108]	; 0x6c
        c = *sFormat;
 8000960:	e7e4      	b.n	800092c <SEGGER_RTT_vprintf+0xec>
      } while (1);

      //
      // Filter out precision (number of digits to display)
      //
      NumDigits = 0u;
 8000962:	2300      	movs	r3, #0
 8000964:	677b      	str	r3, [r7, #116]	; 0x74
      c = *sFormat;
 8000966:	68bb      	ldr	r3, [r7, #8]
 8000968:	781b      	ldrb	r3, [r3, #0]
 800096a:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
      if (c == '.') {
 800096e:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8000972:	2b2e      	cmp	r3, #46	; 0x2e
 8000974:	d11d      	bne.n	80009b2 <SEGGER_RTT_vprintf+0x172>
        sFormat++;
 8000976:	68bb      	ldr	r3, [r7, #8]
 8000978:	3301      	adds	r3, #1
 800097a:	60bb      	str	r3, [r7, #8]
        do {
          c = *sFormat;
 800097c:	68bb      	ldr	r3, [r7, #8]
 800097e:	781b      	ldrb	r3, [r3, #0]
 8000980:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
          if ((c < '0') || (c > '9')) {
 8000984:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8000988:	2b2f      	cmp	r3, #47	; 0x2f
 800098a:	d912      	bls.n	80009b2 <SEGGER_RTT_vprintf+0x172>
 800098c:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8000990:	2b39      	cmp	r3, #57	; 0x39
 8000992:	d80e      	bhi.n	80009b2 <SEGGER_RTT_vprintf+0x172>
            break;
          }
          sFormat++;
 8000994:	68bb      	ldr	r3, [r7, #8]
 8000996:	3301      	adds	r3, #1
 8000998:	60bb      	str	r3, [r7, #8]
          NumDigits = NumDigits * 10u + ((unsigned)c - '0');
 800099a:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800099c:	4613      	mov	r3, r2
 800099e:	009b      	lsls	r3, r3, #2
 80009a0:	4413      	add	r3, r2
 80009a2:	005b      	lsls	r3, r3, #1
 80009a4:	461a      	mov	r2, r3
 80009a6:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 80009aa:	4413      	add	r3, r2
 80009ac:	3b30      	subs	r3, #48	; 0x30
 80009ae:	677b      	str	r3, [r7, #116]	; 0x74
          c = *sFormat;
 80009b0:	e7e4      	b.n	800097c <SEGGER_RTT_vprintf+0x13c>
        } while (1);
      }
      //
      // Filter out length modifier
      //
      c = *sFormat;
 80009b2:	68bb      	ldr	r3, [r7, #8]
 80009b4:	781b      	ldrb	r3, [r3, #0]
 80009b6:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
      do {
        if ((c == 'l') || (c == 'h')) {
 80009ba:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 80009be:	2b6c      	cmp	r3, #108	; 0x6c
 80009c0:	d003      	beq.n	80009ca <SEGGER_RTT_vprintf+0x18a>
 80009c2:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 80009c6:	2b68      	cmp	r3, #104	; 0x68
 80009c8:	d107      	bne.n	80009da <SEGGER_RTT_vprintf+0x19a>
          sFormat++;
 80009ca:	68bb      	ldr	r3, [r7, #8]
 80009cc:	3301      	adds	r3, #1
 80009ce:	60bb      	str	r3, [r7, #8]
          c = *sFormat;
 80009d0:	68bb      	ldr	r3, [r7, #8]
 80009d2:	781b      	ldrb	r3, [r3, #0]
 80009d4:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
        if ((c == 'l') || (c == 'h')) {
 80009d8:	e7ef      	b.n	80009ba <SEGGER_RTT_vprintf+0x17a>
        }
      } while (1);
      //
      // Handle specifiers
      //
      switch (c) {
 80009da:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 80009de:	2b25      	cmp	r3, #37	; 0x25
 80009e0:	f000 80d1 	beq.w	8000b86 <SEGGER_RTT_vprintf+0x346>
 80009e4:	2b25      	cmp	r3, #37	; 0x25
 80009e6:	f2c0 80d5 	blt.w	8000b94 <SEGGER_RTT_vprintf+0x354>
 80009ea:	2b78      	cmp	r3, #120	; 0x78
 80009ec:	f300 80d2 	bgt.w	8000b94 <SEGGER_RTT_vprintf+0x354>
 80009f0:	2b58      	cmp	r3, #88	; 0x58
 80009f2:	f2c0 80cf 	blt.w	8000b94 <SEGGER_RTT_vprintf+0x354>
 80009f6:	3b58      	subs	r3, #88	; 0x58
 80009f8:	2b20      	cmp	r3, #32
 80009fa:	f200 80cb 	bhi.w	8000b94 <SEGGER_RTT_vprintf+0x354>
 80009fe:	a201      	add	r2, pc, #4	; (adr r2, 8000a04 <SEGGER_RTT_vprintf+0x1c4>)
 8000a00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a04:	08000afb 	.word	0x08000afb
 8000a08:	08000b95 	.word	0x08000b95
 8000a0c:	08000b95 	.word	0x08000b95
 8000a10:	08000b95 	.word	0x08000b95
 8000a14:	08000b95 	.word	0x08000b95
 8000a18:	08000b95 	.word	0x08000b95
 8000a1c:	08000b95 	.word	0x08000b95
 8000a20:	08000b95 	.word	0x08000b95
 8000a24:	08000b95 	.word	0x08000b95
 8000a28:	08000b95 	.word	0x08000b95
 8000a2c:	08000b95 	.word	0x08000b95
 8000a30:	08000a89 	.word	0x08000a89
 8000a34:	08000aaf 	.word	0x08000aaf
 8000a38:	08000b95 	.word	0x08000b95
 8000a3c:	08000b95 	.word	0x08000b95
 8000a40:	08000b95 	.word	0x08000b95
 8000a44:	08000b95 	.word	0x08000b95
 8000a48:	08000b95 	.word	0x08000b95
 8000a4c:	08000b95 	.word	0x08000b95
 8000a50:	08000b95 	.word	0x08000b95
 8000a54:	08000b95 	.word	0x08000b95
 8000a58:	08000b95 	.word	0x08000b95
 8000a5c:	08000b95 	.word	0x08000b95
 8000a60:	08000b95 	.word	0x08000b95
 8000a64:	08000b61 	.word	0x08000b61
 8000a68:	08000b95 	.word	0x08000b95
 8000a6c:	08000b95 	.word	0x08000b95
 8000a70:	08000b21 	.word	0x08000b21
 8000a74:	08000b95 	.word	0x08000b95
 8000a78:	08000ad5 	.word	0x08000ad5
 8000a7c:	08000b95 	.word	0x08000b95
 8000a80:	08000b95 	.word	0x08000b95
 8000a84:	08000afb 	.word	0x08000afb
      case 'c': {
        char c0;
        v = va_arg(*pParamList, int);
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	681b      	ldr	r3, [r3, #0]
 8000a8c:	1d19      	adds	r1, r3, #4
 8000a8e:	687a      	ldr	r2, [r7, #4]
 8000a90:	6011      	str	r1, [r2, #0]
 8000a92:	681b      	ldr	r3, [r3, #0]
 8000a94:	67bb      	str	r3, [r7, #120]	; 0x78
        c0 = (char)v;
 8000a96:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8000a98:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        _StoreChar(&BufferDesc, c0);
 8000a9c:	f897 2067 	ldrb.w	r2, [r7, #103]	; 0x67
 8000aa0:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000aa4:	4611      	mov	r1, r2
 8000aa6:	4618      	mov	r0, r3
 8000aa8:	f7ff fd38 	bl	800051c <_StoreChar>
        break;
 8000aac:	e073      	b.n	8000b96 <SEGGER_RTT_vprintf+0x356>
      }
      case 'd':
        v = va_arg(*pParamList, int);
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	681b      	ldr	r3, [r3, #0]
 8000ab2:	1d19      	adds	r1, r3, #4
 8000ab4:	687a      	ldr	r2, [r7, #4]
 8000ab6:	6011      	str	r1, [r2, #0]
 8000ab8:	681b      	ldr	r3, [r3, #0]
 8000aba:	67bb      	str	r3, [r7, #120]	; 0x78
        _PrintInt(&BufferDesc, v, 10u, NumDigits, FieldWidth, FormatFlags);
 8000abc:	f107 0050 	add.w	r0, r7, #80	; 0x50
 8000ac0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000ac2:	9301      	str	r3, [sp, #4]
 8000ac4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000ac6:	9300      	str	r3, [sp, #0]
 8000ac8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000aca:	220a      	movs	r2, #10
 8000acc:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8000ace:	f7ff fe0f 	bl	80006f0 <_PrintInt>
        break;
 8000ad2:	e060      	b.n	8000b96 <SEGGER_RTT_vprintf+0x356>
      case 'u':
        v = va_arg(*pParamList, int);
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	681b      	ldr	r3, [r3, #0]
 8000ad8:	1d19      	adds	r1, r3, #4
 8000ada:	687a      	ldr	r2, [r7, #4]
 8000adc:	6011      	str	r1, [r2, #0]
 8000ade:	681b      	ldr	r3, [r3, #0]
 8000ae0:	67bb      	str	r3, [r7, #120]	; 0x78
        _PrintUnsigned(&BufferDesc, (unsigned)v, 10u, NumDigits, FieldWidth, FormatFlags);
 8000ae2:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8000ae4:	f107 0050 	add.w	r0, r7, #80	; 0x50
 8000ae8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000aea:	9301      	str	r3, [sp, #4]
 8000aec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000aee:	9300      	str	r3, [sp, #0]
 8000af0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000af2:	220a      	movs	r2, #10
 8000af4:	f7ff fd50 	bl	8000598 <_PrintUnsigned>
        break;
 8000af8:	e04d      	b.n	8000b96 <SEGGER_RTT_vprintf+0x356>
      case 'x':
      case 'X':
        v = va_arg(*pParamList, int);
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	681b      	ldr	r3, [r3, #0]
 8000afe:	1d19      	adds	r1, r3, #4
 8000b00:	687a      	ldr	r2, [r7, #4]
 8000b02:	6011      	str	r1, [r2, #0]
 8000b04:	681b      	ldr	r3, [r3, #0]
 8000b06:	67bb      	str	r3, [r7, #120]	; 0x78
        _PrintUnsigned(&BufferDesc, (unsigned)v, 16u, NumDigits, FieldWidth, FormatFlags);
 8000b08:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8000b0a:	f107 0050 	add.w	r0, r7, #80	; 0x50
 8000b0e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000b10:	9301      	str	r3, [sp, #4]
 8000b12:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000b14:	9300      	str	r3, [sp, #0]
 8000b16:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000b18:	2210      	movs	r2, #16
 8000b1a:	f7ff fd3d 	bl	8000598 <_PrintUnsigned>
        break;
 8000b1e:	e03a      	b.n	8000b96 <SEGGER_RTT_vprintf+0x356>
      case 's':
        {
          const char * s = va_arg(*pParamList, const char *);
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	681b      	ldr	r3, [r3, #0]
 8000b24:	1d19      	adds	r1, r3, #4
 8000b26:	687a      	ldr	r2, [r7, #4]
 8000b28:	6011      	str	r1, [r2, #0]
 8000b2a:	681b      	ldr	r3, [r3, #0]
 8000b2c:	66bb      	str	r3, [r7, #104]	; 0x68
          do {
            c = *s;
 8000b2e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000b30:	781b      	ldrb	r3, [r3, #0]
 8000b32:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
            s++;
 8000b36:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000b38:	3301      	adds	r3, #1
 8000b3a:	66bb      	str	r3, [r7, #104]	; 0x68
            if (c == '\0') {
 8000b3c:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8000b40:	2b00      	cmp	r3, #0
 8000b42:	d00b      	beq.n	8000b5c <SEGGER_RTT_vprintf+0x31c>
              break;
            }
           _StoreChar(&BufferDesc, c);
 8000b44:	f897 207f 	ldrb.w	r2, [r7, #127]	; 0x7f
 8000b48:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000b4c:	4611      	mov	r1, r2
 8000b4e:	4618      	mov	r0, r3
 8000b50:	f7ff fce4 	bl	800051c <_StoreChar>
          } while (BufferDesc.ReturnValue >= 0);
 8000b54:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000b56:	2b00      	cmp	r3, #0
 8000b58:	dae9      	bge.n	8000b2e <SEGGER_RTT_vprintf+0x2ee>
        }
        break;
 8000b5a:	e01c      	b.n	8000b96 <SEGGER_RTT_vprintf+0x356>
              break;
 8000b5c:	bf00      	nop
        break;
 8000b5e:	e01a      	b.n	8000b96 <SEGGER_RTT_vprintf+0x356>
      case 'p':
        v = va_arg(*pParamList, int);
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	681b      	ldr	r3, [r3, #0]
 8000b64:	1d19      	adds	r1, r3, #4
 8000b66:	687a      	ldr	r2, [r7, #4]
 8000b68:	6011      	str	r1, [r2, #0]
 8000b6a:	681b      	ldr	r3, [r3, #0]
 8000b6c:	67bb      	str	r3, [r7, #120]	; 0x78
        _PrintUnsigned(&BufferDesc, (unsigned)v, 16u, 8u, 8u, 0u);
 8000b6e:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8000b70:	f107 0050 	add.w	r0, r7, #80	; 0x50
 8000b74:	2300      	movs	r3, #0
 8000b76:	9301      	str	r3, [sp, #4]
 8000b78:	2308      	movs	r3, #8
 8000b7a:	9300      	str	r3, [sp, #0]
 8000b7c:	2308      	movs	r3, #8
 8000b7e:	2210      	movs	r2, #16
 8000b80:	f7ff fd0a 	bl	8000598 <_PrintUnsigned>
        break;
 8000b84:	e007      	b.n	8000b96 <SEGGER_RTT_vprintf+0x356>
      case '%':
        _StoreChar(&BufferDesc, '%');
 8000b86:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000b8a:	2125      	movs	r1, #37	; 0x25
 8000b8c:	4618      	mov	r0, r3
 8000b8e:	f7ff fcc5 	bl	800051c <_StoreChar>
        break;
 8000b92:	e000      	b.n	8000b96 <SEGGER_RTT_vprintf+0x356>
      default:
        break;
 8000b94:	bf00      	nop
      }
      sFormat++;
 8000b96:	68bb      	ldr	r3, [r7, #8]
 8000b98:	3301      	adds	r3, #1
 8000b9a:	60bb      	str	r3, [r7, #8]
 8000b9c:	e007      	b.n	8000bae <SEGGER_RTT_vprintf+0x36e>
    } else {
      _StoreChar(&BufferDesc, c);
 8000b9e:	f897 207f 	ldrb.w	r2, [r7, #127]	; 0x7f
 8000ba2:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000ba6:	4611      	mov	r1, r2
 8000ba8:	4618      	mov	r0, r3
 8000baa:	f7ff fcb7 	bl	800051c <_StoreChar>
    }
  } while (BufferDesc.ReturnValue >= 0);
 8000bae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000bb0:	2b00      	cmp	r3, #0
 8000bb2:	f6bf ae56 	bge.w	8000862 <SEGGER_RTT_vprintf+0x22>
 8000bb6:	e000      	b.n	8000bba <SEGGER_RTT_vprintf+0x37a>
      break;
 8000bb8:	bf00      	nop

  if (BufferDesc.ReturnValue > 0) {
 8000bba:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000bbc:	2b00      	cmp	r3, #0
 8000bbe:	dd0d      	ble.n	8000bdc <SEGGER_RTT_vprintf+0x39c>
    //
    // Write remaining data, if any
    //
    if (BufferDesc.Cnt != 0u) {
 8000bc0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000bc2:	2b00      	cmp	r3, #0
 8000bc4:	d006      	beq.n	8000bd4 <SEGGER_RTT_vprintf+0x394>
      SEGGER_RTT_Write(BufferIndex, acBuffer, BufferDesc.Cnt);
 8000bc6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8000bc8:	f107 0310 	add.w	r3, r7, #16
 8000bcc:	4619      	mov	r1, r3
 8000bce:	68f8      	ldr	r0, [r7, #12]
 8000bd0:	f7ff fc34 	bl	800043c <SEGGER_RTT_Write>
    }
    BufferDesc.ReturnValue += (int)BufferDesc.Cnt;
 8000bd4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000bd6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8000bd8:	4413      	add	r3, r2
 8000bda:	65fb      	str	r3, [r7, #92]	; 0x5c
  }
  return BufferDesc.ReturnValue;
 8000bdc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
}
 8000bde:	4618      	mov	r0, r3
 8000be0:	3780      	adds	r7, #128	; 0x80
 8000be2:	46bd      	mov	sp, r7
 8000be4:	bd80      	pop	{r7, pc}
 8000be6:	bf00      	nop

08000be8 <SEGGER_RTT_printf>:
*          u: Print the argument as an unsigned integer
*          x: Print the argument as an hexadecimal integer
*          s: Print the string pointed to by the argument
*          p: Print the argument as an 8-digit hexadecimal integer. (Argument shall be a pointer to void.)
*/
int SEGGER_RTT_printf(unsigned BufferIndex, const char * sFormat, ...) {
 8000be8:	b40e      	push	{r1, r2, r3}
 8000bea:	b580      	push	{r7, lr}
 8000bec:	b085      	sub	sp, #20
 8000bee:	af00      	add	r7, sp, #0
 8000bf0:	6078      	str	r0, [r7, #4]
  int r;
  va_list ParamList;

  va_start(ParamList, sFormat);
 8000bf2:	f107 0320 	add.w	r3, r7, #32
 8000bf6:	60bb      	str	r3, [r7, #8]
  r = SEGGER_RTT_vprintf(BufferIndex, sFormat, &ParamList);
 8000bf8:	f107 0308 	add.w	r3, r7, #8
 8000bfc:	461a      	mov	r2, r3
 8000bfe:	69f9      	ldr	r1, [r7, #28]
 8000c00:	6878      	ldr	r0, [r7, #4]
 8000c02:	f7ff fe1d 	bl	8000840 <SEGGER_RTT_vprintf>
 8000c06:	60f8      	str	r0, [r7, #12]
  va_end(ParamList);
  return r;
 8000c08:	68fb      	ldr	r3, [r7, #12]
}
 8000c0a:	4618      	mov	r0, r3
 8000c0c:	3714      	adds	r7, #20
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000c14:	b003      	add	sp, #12
 8000c16:	4770      	bx	lr

08000c18 <GPIO_Init>:
 *      Author: ADMIN
 */
#include "stm32f103xx_gpio.h"

void GPIO_Init(GPIO_Handle_t *pGPIOHandle)
{
 8000c18:	b480      	push	{r7}
 8000c1a:	b085      	sub	sp, #20
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	6078      	str	r0, [r7, #4]
	uint32_t temp = 0;
 8000c20:	2300      	movs	r3, #0
 8000c22:	60fb      	str	r3, [r7, #12]
	uint8_t getmode = ( pGPIOHandle->GPIO_PinConfig.GPIO_PinMode_CNF << 2 ) + ( pGPIOHandle->GPIO_PinConfig.GPIO_PinMode );
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	799b      	ldrb	r3, [r3, #6]
 8000c28:	009b      	lsls	r3, r3, #2
 8000c2a:	b2da      	uxtb	r2, r3
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	795b      	ldrb	r3, [r3, #5]
 8000c30:	4413      	add	r3, r2
 8000c32:	72fb      	strb	r3, [r7, #11]
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber < 8)
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	791b      	ldrb	r3, [r3, #4]
 8000c38:	2b07      	cmp	r3, #7
 8000c3a:	d81e      	bhi.n	8000c7a <GPIO_Init+0x62>
	{
		temp = getmode << ( 4 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber );
 8000c3c:	7afa      	ldrb	r2, [r7, #11]
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	791b      	ldrb	r3, [r3, #4]
 8000c42:	009b      	lsls	r3, r3, #2
 8000c44:	fa02 f303 	lsl.w	r3, r2, r3
 8000c48:	60fb      	str	r3, [r7, #12]
		pGPIOHandle->pGPIOx->CRL &= ~( 0xF << (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber * 4));
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	681b      	ldr	r3, [r3, #0]
 8000c4e:	681a      	ldr	r2, [r3, #0]
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	791b      	ldrb	r3, [r3, #4]
 8000c54:	009b      	lsls	r3, r3, #2
 8000c56:	210f      	movs	r1, #15
 8000c58:	fa01 f303 	lsl.w	r3, r1, r3
 8000c5c:	43db      	mvns	r3, r3
 8000c5e:	4619      	mov	r1, r3
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	400a      	ands	r2, r1
 8000c66:	601a      	str	r2, [r3, #0]
		pGPIOHandle->pGPIOx->CRL |= temp;
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	6819      	ldr	r1, [r3, #0]
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	681b      	ldr	r3, [r3, #0]
 8000c72:	68fa      	ldr	r2, [r7, #12]
 8000c74:	430a      	orrs	r2, r1
 8000c76:	601a      	str	r2, [r3, #0]
 8000c78:	e01f      	b.n	8000cba <GPIO_Init+0xa2>
	}else
	{
		temp = getmode << ( 4 * (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber-8) );
 8000c7a:	7afa      	ldrb	r2, [r7, #11]
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	791b      	ldrb	r3, [r3, #4]
 8000c80:	3b08      	subs	r3, #8
 8000c82:	009b      	lsls	r3, r3, #2
 8000c84:	fa02 f303 	lsl.w	r3, r2, r3
 8000c88:	60fb      	str	r3, [r7, #12]
		pGPIOHandle->pGPIOx->CRH &= ~( 0xF << ((pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber-8) * 4));
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	681b      	ldr	r3, [r3, #0]
 8000c8e:	685a      	ldr	r2, [r3, #4]
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	791b      	ldrb	r3, [r3, #4]
 8000c94:	3b08      	subs	r3, #8
 8000c96:	009b      	lsls	r3, r3, #2
 8000c98:	210f      	movs	r1, #15
 8000c9a:	fa01 f303 	lsl.w	r3, r1, r3
 8000c9e:	43db      	mvns	r3, r3
 8000ca0:	4619      	mov	r1, r3
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	681b      	ldr	r3, [r3, #0]
 8000ca6:	400a      	ands	r2, r1
 8000ca8:	605a      	str	r2, [r3, #4]
		pGPIOHandle->pGPIOx->CRH |= temp;
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	681b      	ldr	r3, [r3, #0]
 8000cae:	6859      	ldr	r1, [r3, #4]
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	68fa      	ldr	r2, [r7, #12]
 8000cb6:	430a      	orrs	r2, r1
 8000cb8:	605a      	str	r2, [r3, #4]
	}
	temp = 0;
 8000cba:	2300      	movs	r3, #0
 8000cbc:	60fb      	str	r3, [r7, #12]
}
 8000cbe:	bf00      	nop
 8000cc0:	3714      	adds	r7, #20
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	bc80      	pop	{r7}
 8000cc6:	4770      	bx	lr

08000cc8 <GPIO_ToggleOutputPin>:
{
	pGPIOx->ODR = value;
}

void GPIO_ToggleOutputPin(GPIO_Reg_t *pGPIOx, uint8_t PinNumber)
{
 8000cc8:	b480      	push	{r7}
 8000cca:	b083      	sub	sp, #12
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	6078      	str	r0, [r7, #4]
 8000cd0:	460b      	mov	r3, r1
 8000cd2:	70fb      	strb	r3, [r7, #3]
	pGPIOx->ODR ^= (1 << PinNumber);
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	68db      	ldr	r3, [r3, #12]
 8000cd8:	78fa      	ldrb	r2, [r7, #3]
 8000cda:	2101      	movs	r1, #1
 8000cdc:	fa01 f202 	lsl.w	r2, r1, r2
 8000ce0:	405a      	eors	r2, r3
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	60da      	str	r2, [r3, #12]
}
 8000ce6:	bf00      	nop
 8000ce8:	370c      	adds	r7, #12
 8000cea:	46bd      	mov	sp, r7
 8000cec:	bc80      	pop	{r7}
 8000cee:	4770      	bx	lr

08000cf0 <GPIO_PeriClockControl>:
	return value;
}

#if MY_CODE != 1            /* Dùng hàm GPIO_PeriClockControl theo hướng dẫn */
void GPIO_PeriClockControl(GPIO_Reg_t *pGPIOx, uint8_t EnorDi)
{
 8000cf0:	b480      	push	{r7}
 8000cf2:	b083      	sub	sp, #12
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	6078      	str	r0, [r7, #4]
 8000cf8:	460b      	mov	r3, r1
 8000cfa:	70fb      	strb	r3, [r7, #3]
	if(EnorDi != DISABLE)
 8000cfc:	78fb      	ldrb	r3, [r7, #3]
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	d04c      	beq.n	8000d9c <GPIO_PeriClockControl+0xac>
	{
		if(pGPIOx == GPIOA)
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	4a4e      	ldr	r2, [pc, #312]	; (8000e40 <GPIO_PeriClockControl+0x150>)
 8000d06:	4293      	cmp	r3, r2
 8000d08:	d106      	bne.n	8000d18 <GPIO_PeriClockControl+0x28>
		{
			GPIOA_PERI_CLOCK_ENABLE();
 8000d0a:	4b4e      	ldr	r3, [pc, #312]	; (8000e44 <GPIO_PeriClockControl+0x154>)
 8000d0c:	699b      	ldr	r3, [r3, #24]
 8000d0e:	4a4d      	ldr	r2, [pc, #308]	; (8000e44 <GPIO_PeriClockControl+0x154>)
 8000d10:	f043 0304 	orr.w	r3, r3, #4
 8000d14:	6193      	str	r3, [r2, #24]
		else if(pGPIOx == GPIOG)
		{
			GPIOG_PERI_CLOCK_DISABLE();
		}
	}
}
 8000d16:	e08d      	b.n	8000e34 <GPIO_PeriClockControl+0x144>
		else if(pGPIOx == GPIOB)
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	4a4b      	ldr	r2, [pc, #300]	; (8000e48 <GPIO_PeriClockControl+0x158>)
 8000d1c:	4293      	cmp	r3, r2
 8000d1e:	d106      	bne.n	8000d2e <GPIO_PeriClockControl+0x3e>
			GPIOB_PERI_CLOCK_ENABLE();
 8000d20:	4b48      	ldr	r3, [pc, #288]	; (8000e44 <GPIO_PeriClockControl+0x154>)
 8000d22:	699b      	ldr	r3, [r3, #24]
 8000d24:	4a47      	ldr	r2, [pc, #284]	; (8000e44 <GPIO_PeriClockControl+0x154>)
 8000d26:	f043 0308 	orr.w	r3, r3, #8
 8000d2a:	6193      	str	r3, [r2, #24]
}
 8000d2c:	e082      	b.n	8000e34 <GPIO_PeriClockControl+0x144>
		else if(pGPIOx == GPIOC)
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	4a46      	ldr	r2, [pc, #280]	; (8000e4c <GPIO_PeriClockControl+0x15c>)
 8000d32:	4293      	cmp	r3, r2
 8000d34:	d106      	bne.n	8000d44 <GPIO_PeriClockControl+0x54>
			GPIOC_PERI_CLOCK_ENABLE();
 8000d36:	4b43      	ldr	r3, [pc, #268]	; (8000e44 <GPIO_PeriClockControl+0x154>)
 8000d38:	699b      	ldr	r3, [r3, #24]
 8000d3a:	4a42      	ldr	r2, [pc, #264]	; (8000e44 <GPIO_PeriClockControl+0x154>)
 8000d3c:	f043 0310 	orr.w	r3, r3, #16
 8000d40:	6193      	str	r3, [r2, #24]
}
 8000d42:	e077      	b.n	8000e34 <GPIO_PeriClockControl+0x144>
		else if(pGPIOx == GPIOD)
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	4a42      	ldr	r2, [pc, #264]	; (8000e50 <GPIO_PeriClockControl+0x160>)
 8000d48:	4293      	cmp	r3, r2
 8000d4a:	d106      	bne.n	8000d5a <GPIO_PeriClockControl+0x6a>
			GPIOD_PERI_CLOCK_ENABLE();
 8000d4c:	4b3d      	ldr	r3, [pc, #244]	; (8000e44 <GPIO_PeriClockControl+0x154>)
 8000d4e:	699b      	ldr	r3, [r3, #24]
 8000d50:	4a3c      	ldr	r2, [pc, #240]	; (8000e44 <GPIO_PeriClockControl+0x154>)
 8000d52:	f043 0320 	orr.w	r3, r3, #32
 8000d56:	6193      	str	r3, [r2, #24]
}
 8000d58:	e06c      	b.n	8000e34 <GPIO_PeriClockControl+0x144>
		else if(pGPIOx == GPIOE)
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	4a3d      	ldr	r2, [pc, #244]	; (8000e54 <GPIO_PeriClockControl+0x164>)
 8000d5e:	4293      	cmp	r3, r2
 8000d60:	d106      	bne.n	8000d70 <GPIO_PeriClockControl+0x80>
			GPIOE_PERI_CLOCK_ENABLE();
 8000d62:	4b38      	ldr	r3, [pc, #224]	; (8000e44 <GPIO_PeriClockControl+0x154>)
 8000d64:	699b      	ldr	r3, [r3, #24]
 8000d66:	4a37      	ldr	r2, [pc, #220]	; (8000e44 <GPIO_PeriClockControl+0x154>)
 8000d68:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000d6c:	6193      	str	r3, [r2, #24]
}
 8000d6e:	e061      	b.n	8000e34 <GPIO_PeriClockControl+0x144>
		else if(pGPIOx == GPIOF)
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	4a39      	ldr	r2, [pc, #228]	; (8000e58 <GPIO_PeriClockControl+0x168>)
 8000d74:	4293      	cmp	r3, r2
 8000d76:	d106      	bne.n	8000d86 <GPIO_PeriClockControl+0x96>
			GPIOF_PERI_CLOCK_ENABLE();
 8000d78:	4b32      	ldr	r3, [pc, #200]	; (8000e44 <GPIO_PeriClockControl+0x154>)
 8000d7a:	699b      	ldr	r3, [r3, #24]
 8000d7c:	4a31      	ldr	r2, [pc, #196]	; (8000e44 <GPIO_PeriClockControl+0x154>)
 8000d7e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000d82:	6193      	str	r3, [r2, #24]
}
 8000d84:	e056      	b.n	8000e34 <GPIO_PeriClockControl+0x144>
		else if(pGPIOx == GPIOG)
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	4a34      	ldr	r2, [pc, #208]	; (8000e5c <GPIO_PeriClockControl+0x16c>)
 8000d8a:	4293      	cmp	r3, r2
 8000d8c:	d152      	bne.n	8000e34 <GPIO_PeriClockControl+0x144>
			GPIOG_PERI_CLOCK_ENABLE();
 8000d8e:	4b2d      	ldr	r3, [pc, #180]	; (8000e44 <GPIO_PeriClockControl+0x154>)
 8000d90:	699b      	ldr	r3, [r3, #24]
 8000d92:	4a2c      	ldr	r2, [pc, #176]	; (8000e44 <GPIO_PeriClockControl+0x154>)
 8000d94:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d98:	6193      	str	r3, [r2, #24]
}
 8000d9a:	e04b      	b.n	8000e34 <GPIO_PeriClockControl+0x144>
		if(pGPIOx == GPIOA)
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	4a28      	ldr	r2, [pc, #160]	; (8000e40 <GPIO_PeriClockControl+0x150>)
 8000da0:	4293      	cmp	r3, r2
 8000da2:	d106      	bne.n	8000db2 <GPIO_PeriClockControl+0xc2>
			GPIOA_PERI_CLOCK_DISABLE();
 8000da4:	4b27      	ldr	r3, [pc, #156]	; (8000e44 <GPIO_PeriClockControl+0x154>)
 8000da6:	699b      	ldr	r3, [r3, #24]
 8000da8:	4a26      	ldr	r2, [pc, #152]	; (8000e44 <GPIO_PeriClockControl+0x154>)
 8000daa:	f023 0304 	bic.w	r3, r3, #4
 8000dae:	6193      	str	r3, [r2, #24]
}
 8000db0:	e040      	b.n	8000e34 <GPIO_PeriClockControl+0x144>
		else if(pGPIOx == GPIOB)
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	4a24      	ldr	r2, [pc, #144]	; (8000e48 <GPIO_PeriClockControl+0x158>)
 8000db6:	4293      	cmp	r3, r2
 8000db8:	d106      	bne.n	8000dc8 <GPIO_PeriClockControl+0xd8>
			GPIOB_PERI_CLOCK_DISABLE();
 8000dba:	4b22      	ldr	r3, [pc, #136]	; (8000e44 <GPIO_PeriClockControl+0x154>)
 8000dbc:	699b      	ldr	r3, [r3, #24]
 8000dbe:	4a21      	ldr	r2, [pc, #132]	; (8000e44 <GPIO_PeriClockControl+0x154>)
 8000dc0:	f023 0308 	bic.w	r3, r3, #8
 8000dc4:	6193      	str	r3, [r2, #24]
}
 8000dc6:	e035      	b.n	8000e34 <GPIO_PeriClockControl+0x144>
		else if(pGPIOx == GPIOC)
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	4a20      	ldr	r2, [pc, #128]	; (8000e4c <GPIO_PeriClockControl+0x15c>)
 8000dcc:	4293      	cmp	r3, r2
 8000dce:	d106      	bne.n	8000dde <GPIO_PeriClockControl+0xee>
			GPIOC_PERI_CLOCK_DISABLE();
 8000dd0:	4b1c      	ldr	r3, [pc, #112]	; (8000e44 <GPIO_PeriClockControl+0x154>)
 8000dd2:	699b      	ldr	r3, [r3, #24]
 8000dd4:	4a1b      	ldr	r2, [pc, #108]	; (8000e44 <GPIO_PeriClockControl+0x154>)
 8000dd6:	f023 0310 	bic.w	r3, r3, #16
 8000dda:	6193      	str	r3, [r2, #24]
}
 8000ddc:	e02a      	b.n	8000e34 <GPIO_PeriClockControl+0x144>
		else if(pGPIOx == GPIOD)
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	4a1b      	ldr	r2, [pc, #108]	; (8000e50 <GPIO_PeriClockControl+0x160>)
 8000de2:	4293      	cmp	r3, r2
 8000de4:	d106      	bne.n	8000df4 <GPIO_PeriClockControl+0x104>
			GPIOD_PERI_CLOCK_DISABLE();
 8000de6:	4b17      	ldr	r3, [pc, #92]	; (8000e44 <GPIO_PeriClockControl+0x154>)
 8000de8:	699b      	ldr	r3, [r3, #24]
 8000dea:	4a16      	ldr	r2, [pc, #88]	; (8000e44 <GPIO_PeriClockControl+0x154>)
 8000dec:	f023 0320 	bic.w	r3, r3, #32
 8000df0:	6193      	str	r3, [r2, #24]
}
 8000df2:	e01f      	b.n	8000e34 <GPIO_PeriClockControl+0x144>
		else if(pGPIOx == GPIOE)
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	4a17      	ldr	r2, [pc, #92]	; (8000e54 <GPIO_PeriClockControl+0x164>)
 8000df8:	4293      	cmp	r3, r2
 8000dfa:	d106      	bne.n	8000e0a <GPIO_PeriClockControl+0x11a>
			GPIOE_PERI_CLOCK_DISABLE();
 8000dfc:	4b11      	ldr	r3, [pc, #68]	; (8000e44 <GPIO_PeriClockControl+0x154>)
 8000dfe:	699b      	ldr	r3, [r3, #24]
 8000e00:	4a10      	ldr	r2, [pc, #64]	; (8000e44 <GPIO_PeriClockControl+0x154>)
 8000e02:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000e06:	6193      	str	r3, [r2, #24]
}
 8000e08:	e014      	b.n	8000e34 <GPIO_PeriClockControl+0x144>
		else if(pGPIOx == GPIOF)
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	4a12      	ldr	r2, [pc, #72]	; (8000e58 <GPIO_PeriClockControl+0x168>)
 8000e0e:	4293      	cmp	r3, r2
 8000e10:	d106      	bne.n	8000e20 <GPIO_PeriClockControl+0x130>
			GPIOF_PERI_CLOCK_DISABLE();
 8000e12:	4b0c      	ldr	r3, [pc, #48]	; (8000e44 <GPIO_PeriClockControl+0x154>)
 8000e14:	699b      	ldr	r3, [r3, #24]
 8000e16:	4a0b      	ldr	r2, [pc, #44]	; (8000e44 <GPIO_PeriClockControl+0x154>)
 8000e18:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000e1c:	6193      	str	r3, [r2, #24]
}
 8000e1e:	e009      	b.n	8000e34 <GPIO_PeriClockControl+0x144>
		else if(pGPIOx == GPIOG)
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	4a0e      	ldr	r2, [pc, #56]	; (8000e5c <GPIO_PeriClockControl+0x16c>)
 8000e24:	4293      	cmp	r3, r2
 8000e26:	d105      	bne.n	8000e34 <GPIO_PeriClockControl+0x144>
			GPIOG_PERI_CLOCK_DISABLE();
 8000e28:	4b06      	ldr	r3, [pc, #24]	; (8000e44 <GPIO_PeriClockControl+0x154>)
 8000e2a:	699b      	ldr	r3, [r3, #24]
 8000e2c:	4a05      	ldr	r2, [pc, #20]	; (8000e44 <GPIO_PeriClockControl+0x154>)
 8000e2e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000e32:	6193      	str	r3, [r2, #24]
}
 8000e34:	bf00      	nop
 8000e36:	370c      	adds	r7, #12
 8000e38:	46bd      	mov	sp, r7
 8000e3a:	bc80      	pop	{r7}
 8000e3c:	4770      	bx	lr
 8000e3e:	bf00      	nop
 8000e40:	40010800 	.word	0x40010800
 8000e44:	40021000 	.word	0x40021000
 8000e48:	40010c00 	.word	0x40010c00
 8000e4c:	40011000 	.word	0x40011000
 8000e50:	40011400 	.word	0x40011400
 8000e54:	40011800 	.word	0x40011800
 8000e58:	40011c00 	.word	0x40011c00
 8000e5c:	40012000 	.word	0x40012000

08000e60 <delay>:
#if !defined(__SOFT_FP__) && defined(__ARM_FP)
  #warning "FPU is not initialized, but the project is compiling for an FPU. Please initialize the FPU before use."
#endif

void delay(void)
{
 8000e60:	b480      	push	{r7}
 8000e62:	b083      	sub	sp, #12
 8000e64:	af00      	add	r7, sp, #0
	for(uint32_t i = 0; i < 200000; i++);
 8000e66:	2300      	movs	r3, #0
 8000e68:	607b      	str	r3, [r7, #4]
 8000e6a:	e002      	b.n	8000e72 <delay+0x12>
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	3301      	adds	r3, #1
 8000e70:	607b      	str	r3, [r7, #4]
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	4a04      	ldr	r2, [pc, #16]	; (8000e88 <delay+0x28>)
 8000e76:	4293      	cmp	r3, r2
 8000e78:	d9f8      	bls.n	8000e6c <delay+0xc>
}
 8000e7a:	bf00      	nop
 8000e7c:	bf00      	nop
 8000e7e:	370c      	adds	r7, #12
 8000e80:	46bd      	mov	sp, r7
 8000e82:	bc80      	pop	{r7}
 8000e84:	4770      	bx	lr
 8000e86:	bf00      	nop
 8000e88:	00030d3f 	.word	0x00030d3f

08000e8c <main>:

int main(void)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	b084      	sub	sp, #16
 8000e90:	af02      	add	r7, sp, #8
	SEGGER_RTT_ConfigUpBuffer(0, NULL, NULL, 0, SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8000e92:	2300      	movs	r3, #0
 8000e94:	9300      	str	r3, [sp, #0]
 8000e96:	2300      	movs	r3, #0
 8000e98:	2200      	movs	r2, #0
 8000e9a:	2100      	movs	r1, #0
 8000e9c:	2000      	movs	r0, #0
 8000e9e:	f7ff faf3 	bl	8000488 <SEGGER_RTT_ConfigUpBuffer>

	GPIO_Handle_t GpioLed;

	GpioLed.pGPIOx = GPIOC;
 8000ea2:	4b0d      	ldr	r3, [pc, #52]	; (8000ed8 <main+0x4c>)
 8000ea4:	603b      	str	r3, [r7, #0]
	GpioLed.GPIO_PinConfig.GPIO_PinNumber = 13;
 8000ea6:	230d      	movs	r3, #13
 8000ea8:	713b      	strb	r3, [r7, #4]
	GpioLed.GPIO_PinConfig.GPIO_PinMode = OUTPUT_MODE_10MHZ;
 8000eaa:	2301      	movs	r3, #1
 8000eac:	717b      	strb	r3, [r7, #5]
	GpioLed.GPIO_PinConfig.GPIO_PinMode_CNF = OUTPUT_OPEN_DRAIN_CNF;
 8000eae:	2301      	movs	r3, #1
 8000eb0:	71bb      	strb	r3, [r7, #6]

	GPIO_PeriClockControl(GPIOC, ENABLE);
 8000eb2:	2101      	movs	r1, #1
 8000eb4:	4808      	ldr	r0, [pc, #32]	; (8000ed8 <main+0x4c>)
 8000eb6:	f7ff ff1b 	bl	8000cf0 <GPIO_PeriClockControl>
	GPIO_Init(&GpioLed);
 8000eba:	463b      	mov	r3, r7
 8000ebc:	4618      	mov	r0, r3
 8000ebe:	f7ff feab 	bl	8000c18 <GPIO_Init>

	SEGGER_RTT_printf(0, "Hello world \n");
 8000ec2:	4906      	ldr	r1, [pc, #24]	; (8000edc <main+0x50>)
 8000ec4:	2000      	movs	r0, #0
 8000ec6:	f7ff fe8f 	bl	8000be8 <SEGGER_RTT_printf>
    /* Loop forever */
	for(;;)
	{
		GPIO_ToggleOutputPin(GPIOC, 13);
 8000eca:	210d      	movs	r1, #13
 8000ecc:	4802      	ldr	r0, [pc, #8]	; (8000ed8 <main+0x4c>)
 8000ece:	f7ff fefb 	bl	8000cc8 <GPIO_ToggleOutputPin>
		delay();
 8000ed2:	f7ff ffc5 	bl	8000e60 <delay>
		GPIO_ToggleOutputPin(GPIOC, 13);
 8000ed6:	e7f8      	b.n	8000eca <main+0x3e>
 8000ed8:	40011000 	.word	0x40011000
 8000edc:	08000fbc 	.word	0x08000fbc

08000ee0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000ee0:	480d      	ldr	r0, [pc, #52]	; (8000f18 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000ee2:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000ee4:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ee8:	480c      	ldr	r0, [pc, #48]	; (8000f1c <LoopForever+0x6>)
  ldr r1, =_edata
 8000eea:	490d      	ldr	r1, [pc, #52]	; (8000f20 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000eec:	4a0d      	ldr	r2, [pc, #52]	; (8000f24 <LoopForever+0xe>)
  movs r3, #0
 8000eee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ef0:	e002      	b.n	8000ef8 <LoopCopyDataInit>

08000ef2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ef2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ef4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ef6:	3304      	adds	r3, #4

08000ef8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ef8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000efa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000efc:	d3f9      	bcc.n	8000ef2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000efe:	4a0a      	ldr	r2, [pc, #40]	; (8000f28 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000f00:	4c0a      	ldr	r4, [pc, #40]	; (8000f2c <LoopForever+0x16>)
  movs r3, #0
 8000f02:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f04:	e001      	b.n	8000f0a <LoopFillZerobss>

08000f06 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f06:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f08:	3204      	adds	r2, #4

08000f0a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f0a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f0c:	d3fb      	bcc.n	8000f06 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000f0e:	f000 f811 	bl	8000f34 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000f12:	f7ff ffbb 	bl	8000e8c <main>

08000f16 <LoopForever>:

LoopForever:
  b LoopForever
 8000f16:	e7fe      	b.n	8000f16 <LoopForever>
  ldr   r0, =_estack
 8000f18:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8000f1c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f20:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000f24:	08000ff8 	.word	0x08000ff8
  ldr r2, =_sbss
 8000f28:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000f2c:	200004d4 	.word	0x200004d4

08000f30 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000f30:	e7fe      	b.n	8000f30 <ADC1_2_IRQHandler>
	...

08000f34 <__libc_init_array>:
 8000f34:	b570      	push	{r4, r5, r6, lr}
 8000f36:	2600      	movs	r6, #0
 8000f38:	4d0c      	ldr	r5, [pc, #48]	; (8000f6c <__libc_init_array+0x38>)
 8000f3a:	4c0d      	ldr	r4, [pc, #52]	; (8000f70 <__libc_init_array+0x3c>)
 8000f3c:	1b64      	subs	r4, r4, r5
 8000f3e:	10a4      	asrs	r4, r4, #2
 8000f40:	42a6      	cmp	r6, r4
 8000f42:	d109      	bne.n	8000f58 <__libc_init_array+0x24>
 8000f44:	f000 f828 	bl	8000f98 <_init>
 8000f48:	2600      	movs	r6, #0
 8000f4a:	4d0a      	ldr	r5, [pc, #40]	; (8000f74 <__libc_init_array+0x40>)
 8000f4c:	4c0a      	ldr	r4, [pc, #40]	; (8000f78 <__libc_init_array+0x44>)
 8000f4e:	1b64      	subs	r4, r4, r5
 8000f50:	10a4      	asrs	r4, r4, #2
 8000f52:	42a6      	cmp	r6, r4
 8000f54:	d105      	bne.n	8000f62 <__libc_init_array+0x2e>
 8000f56:	bd70      	pop	{r4, r5, r6, pc}
 8000f58:	f855 3b04 	ldr.w	r3, [r5], #4
 8000f5c:	4798      	blx	r3
 8000f5e:	3601      	adds	r6, #1
 8000f60:	e7ee      	b.n	8000f40 <__libc_init_array+0xc>
 8000f62:	f855 3b04 	ldr.w	r3, [r5], #4
 8000f66:	4798      	blx	r3
 8000f68:	3601      	adds	r6, #1
 8000f6a:	e7f2      	b.n	8000f52 <__libc_init_array+0x1e>
 8000f6c:	08000ff0 	.word	0x08000ff0
 8000f70:	08000ff0 	.word	0x08000ff0
 8000f74:	08000ff0 	.word	0x08000ff0
 8000f78:	08000ff4 	.word	0x08000ff4

08000f7c <memcpy>:
 8000f7c:	440a      	add	r2, r1
 8000f7e:	4291      	cmp	r1, r2
 8000f80:	f100 33ff 	add.w	r3, r0, #4294967295
 8000f84:	d100      	bne.n	8000f88 <memcpy+0xc>
 8000f86:	4770      	bx	lr
 8000f88:	b510      	push	{r4, lr}
 8000f8a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8000f8e:	4291      	cmp	r1, r2
 8000f90:	f803 4f01 	strb.w	r4, [r3, #1]!
 8000f94:	d1f9      	bne.n	8000f8a <memcpy+0xe>
 8000f96:	bd10      	pop	{r4, pc}

08000f98 <_init>:
 8000f98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000f9a:	bf00      	nop
 8000f9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000f9e:	bc08      	pop	{r3}
 8000fa0:	469e      	mov	lr, r3
 8000fa2:	4770      	bx	lr

08000fa4 <_fini>:
 8000fa4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000fa6:	bf00      	nop
 8000fa8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000faa:	bc08      	pop	{r3}
 8000fac:	469e      	mov	lr, r3
 8000fae:	4770      	bx	lr
